var gamekey = 'tcssc',//游戏key
    apiurl = '';//请求地址

setApiurl();

//检查是否提交请求
function setApiurl() {


    if (checkStorage('token') && checkStorage('host')) {
        var host = getStorage('host'),
            tk = getStorage('token');
        ///Fuzhi/Api/vodie
        apiurl = '/Fuzhi/Api/vodie?gamekey=' + gamekey ;
        //apiurl = host + '/event/present_expect?gamekey=' + gamekey + '&tk=' + tk;
    } else {
        objCount.innerHTML = '登陆错误';
        console.log(objCount);
        return false;
    }
}

function editHashPair(t, e) {
    return HashMap.hashMapSingleton.editPair(t, e)
}

function getHashObject(t) {
    return HashMap.hashMapSingleton.getObject(t)
}

function deleteHashPair(t) {
    HashMap.hashMapSingleton.deletePair(t)
}

function reverseDeleteHashPairs(t) {
    HashMap.hashMapSingleton.reverseDeletePair(t)
}

function getHashKeyListCopy() {
    return HashMap.hashMapSingleton.getKeyListCopy()
}

function getHashObjectListCopy() {
    return HashMap.hashMapSingleton.getObjectListCopy()
}

function trace() {
    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
    InitConfig.isRelease || console.log(Array.prototype.join.call(arguments, " "))
}

var __reflect = this && this.__reflect || function (t, e, r) {
    t.__class__ = e, r ? r.push(e) : r = [e], t.__types__ = t.__types__ ? r.concat(t.__types__) : r
}, __extends = this && this.__extends || function (t, e) {
    function r() {
        this.constructor = t
    }

    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
    t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r)
}, HashMap = function () {
    function t() {
        this.keyArray = new Array, this.objArray = new Array
    }

    return Object.defineProperty(t, "hashMapSingleton", {
        get: function () {
            return this.instance || (this.instance = new t), this.instance
        }, enumerable: !0, configurable: !0
    }), t.prototype.editPair = function (t, e) {
        var r = this.keyArray.indexOf(t);
        return -1 == r ? (this.keyArray.push(t), this.objArray.push(e)) : this.objArray[r] = e, new HashPair(t, e)
    }, t.prototype.getObject = function (t) {
        var e = this.keyArray.indexOf(t);
        return -1 != e ? this.objArray[e] : null
    }, t.prototype.deletePair = function (t) {
        var e = this.keyArray.indexOf(t);
        -1 != e && (this.keyArray.splice(e, 1), this.objArray.splice(e, 1))
    }, t.prototype.getKeyListCopy = function () {
        return this.keyArray.concat()
    }, t.prototype.getObjectListCopy = function () {
        return this.objArray.concat()
    }, t.prototype.reverseDeletePair = function (t) {
        if (-1 != this.objArray.indexOf(t)) for (var e = 0; e < this.objArray.length; e++) this.objArray[e] === t && (this.keyArray.splice(e, 1), this.objArray.splice(e, 1), e--)
    }, t
}();
__reflect(HashMap.prototype, "HashMap");
var HashPair = function () {
    function t(t, e) {
        void 0 === t && (t = null), void 0 === e && (e = null), this.key = t, this.object = e
    }

    return t
}();
__reflect(HashPair.prototype, "HashPair");
var localData;
!function (t) {
    var e = function () {
        function t() {
            this.current = new Current, this.next = new Next
        }

        return t
    }();
    t.DataValueObject = e, __reflect(e.prototype, "localData.DataValueObject")
}(localData || (localData = {}));
var Current = function () {
    function t() {
    }

    return Object.defineProperty(t.prototype, "awardNumbers", {
        get: function () {
            return this.$awardNumbers
        }, set: function (t) {
            var e = t.split(",");
            this.$awardNumbers = e[0] + "," + e[1] + "," + e[2] + "," + e[3] + "," + e[4]
        }, enumerable: !0, configurable: !0
    }), t
}();
__reflect(Current.prototype, "Current");
var Next = function () {
    function t() {
    }

    return t
}();
__reflect(Next.prototype, "Next");
var localData;
!function (t) {
    var e = function () {
        function t() {
        }

        return t
    }();
    t.RecordValueObject = e, __reflect(e.prototype, "localData.RecordValueObject")
}(localData || (localData = {}));
var disDev;
!function (t) {
    var e = function (t) {
        function e() {
            var e = t.call(this) || this;
            if (e.$loopStartFrame = 0, e.$loopEndFrame = 0, e.$driverType = disTypes.DriverType.FRAME, e.playInterval = 1, e.currentInterval = 0, e.executeFrameScript = !0, e.executeLoop = !0, e.executeDriverType = !0, "disDev.AbstractAnimation" == egret.getQualifiedClassName(e)) throw new Error(e.__class__ + " 是用于被继承的抽象类，不能实例化");
            return e
        }

        return __extends(e, t), e.prototype.addFrameScript = function (t, e, r, i) {
        }, e.prototype.removeFrameScript = function (t) {
        }, e.prototype.stop = function () {
        }, e.prototype.play = function () {
        }, e.prototype.gotoAndPlay = function (t) {
        }, e.prototype.gotoAndStop = function (t) {
        }, e.prototype.nextFrame = function () {
        }, e.prototype.prevFrame = function () {
        }, e.prototype.playHandler = function (t) {
            void 0 === t && (t = null)
        }, Object.defineProperty(e.prototype, "totalFrames", {
            get: function () {
                return this.$totalFrames
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "currentFrame", {
            get: function () {
                return this.$currentFrame
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "isPlaying", {
            get: function () {
                return this.$isPlaying
            }, enumerable: !0, configurable: !0
        }), e.prototype.setDriver = function (t, e) {
            void 0 === t && (t = disTypes.DriverType.FRAME), void 0 === e && (e = 1)
        }, e.prototype.setLoopPoint = function (t, e, r, i, n) {
            if (void 0 === r && (r = !1), void 0 === i && (i = this.$driverType), void 0 === n && (n = this.playInterval), 1 > t || e > this.$totalFrames) throw new Error("循环播放片段起始帧或结束帧超出范围！");
            if (t > e) throw new Error("循环播放片段起始帧号不能大于结束帧号！");
            this.$loopStartFrame = Math.floor(t), this.$loopEndFrame = Math.floor(e), this.$driverTypeOnLooping = i, this.$playIntervalOnLooping = n, this.executeLoop && r && this.gotoAndPlay(t)
        }, e.prototype.clearLoopPoint = function () {
            this.$loopStartFrame = 0, this.$loopEndFrame = 0
        }, Object.defineProperty(e.prototype, "scaleWidth", {
            get: function () {
                return this.width * this.scaleX
            }, set: function (t) {
                this.scaleX = t / this.width
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "scaleHeight", {
            get: function () {
                return this.height * this.scaleY
            }, set: function (t) {
                this.scaleY = t / this.height
            }, enumerable: !0, configurable: !0
        }), e.prototype.destroy = function () {
            this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop())
        }, e
    }(egret.Sprite);
    t.AbstractAnimation = e, __reflect(e.prototype, "disDev.AbstractAnimation", ["disDev.IAnimation", "disDev.IDisplayObjectLite", "egret.IEventDispatcher"])
}(disDev || (disDev = {}));
var esm;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态方法集成类，不需要实例化")
        }

        return Object.defineProperty(t, "isOpen", {
            get: function () {
                return t._isSoundOpen
            }, set: function (e) {
                t._isSoundOpen = e, t._isSoundOpen ? t.setAllVolumeToDefault() : t.setAllVolume(0)
            }, enumerable: !0, configurable: !0
        }), t.registerSound = function (e, r, i) {
            if (void 0 === i && (i = 1), t.soundObject || (t.soundObject = new Object, t.defaultVolumeObject = new Object), t.soundObject[e]) throw new Error("该音效名称已被注册");
            r.type = egret.Sound.MUSIC, t.soundObject[e] = r, t.defaultVolumeObject[e] = i
        }, t.initAllSoundWithExtreme = function () {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            for (var e in t.soundObject) t.playSound(e, 0, 1, 0, 0);
            t.stopAllSound()
        }, t.playSoundSingle = function (e, r, i, n, a) {
            if (void 0 === r && (r = 0), void 0 === i && (i = 1), void 0 === n && (n = r), void 0 === a && (a = NaN), !t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            t.stopAllSound(), t.playSound(e, r, i, n, a)
        }, t.playSound = function (e, r, i, n, a) {
            if (void 0 === r && (r = 0), void 0 === i && (i = 1), void 0 === n && (n = r), void 0 === a && (a = NaN), !t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            var o = t.soundObject[e];
            t.soundChannelObject || (t.soundChannelObject = new Object), t.soundChannelObject[e] && t.soundChannelObject[e].stop(), t.isOpen ? isNaN(a) && (a = t.defaultVolumeObject[e]) : a = 0, t.stopSound(e);
            var s, l = [e, i, n, a];
            0 != r && 1 != Math.ceil(i) && n != r ? (s = o.play(r, 1), s.addEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t)) : (s = o.play(n, i), 0 != i && s.addEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t)), s.volume = a, t.hashMap.editPair(s, l), t.soundChannelObject[e] = s
        }, t.onSoundComplete = function (e) {
            var r = e.currentTarget, i = t.hashMap.getObject(r);
            t.hashMap.deletePair(r);
            var n = i[0], a = i[1], o = i[2], s = i[3], l = t.soundObject[n];
            t.stopSound(n), 0 == Math.ceil(a) ? r = l.play(o, 0) : (r = l.play(o, Math.ceil(a) - 1), r.addEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t)), r.volume = s, t.hashMap.editPair(r, i), t.soundChannelObject[n] = r, r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t)
        }, t.onSoundEnd = function (e) {
            var r = e.currentTarget, i = t.hashMap.getObject(r), n = i[0];
            r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t), t.hashMap.deletePair(r), delete t.soundChannelObject[n]
        }, t.stopSound = function (e) {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            if (t.soundChannelObject || (t.soundChannelObject = new Object), t.soundChannelObject[e]) {
                var r = t.soundChannelObject[e];
                r.stop(), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t), t.hashMap.deletePair(r), delete t.soundChannelObject[e]
            }
        }, t.stopAllSound = function () {
            if (t.soundChannelObject) for (var e in t.soundChannelObject) {
                var r = t.soundChannelObject[e];
                r.stop(), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t), t.hashMap.deletePair(r), delete t.soundChannelObject[e]
            }
        }, t.setVolume = function (e, r) {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (t.soundChannelObject || (t.soundChannelObject = new Object), (t.isOpen || 0 == r) && t.soundChannelObject[e]) {
                var i = t.soundChannelObject[e];
                i.volume = r
            }
        }, t.setAllVolume = function (e) {
            if (t.soundChannelObject && (t.isOpen || 0 == e)) for (var r in t.soundChannelObject) {
                var i = t.soundChannelObject[r];
                i.volume = e
            }
        }, t.setVolumeToDefault = function (e) {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            if (t.soundChannelObject[e] && (t.isOpen || 0 == t.defaultVolumeObject[e])) {
                var r = t.soundChannelObject[e];
                r.volume = t.defaultVolumeObject[e]
            }
        }, t.setAllVolumeToDefault = function () {
            if (t.soundChannelObject) for (var e in t.soundChannelObject) {
                var r = t.soundChannelObject[e];
                r.volume = t.defaultVolumeObject[e]
            }
        }, t.setDefaultVolume = function (e, r) {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            t.defaultVolumeObject[e] = r
        }, t.getDefaultVolume = function (e) {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            return t.defaultVolumeObject[e]
        }, t.getSoundChannel = function (e) {
            if (!t.soundObject) throw new Error("该音效尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音效尚未被注册和实例化");
            return t.soundChannelObject ? t.soundChannelObject[e] : void 0
        }, t
    }();
    e.hashMap = new HashMap, e._isSoundOpen = !0, t.SoundEffectManager = e, __reflect(e.prototype, "esm.SoundEffectManager")
}(esm || (esm = {}));
var esm;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态方法集成类，不需要实例化")
        }

        return Object.defineProperty(t, "isOpen", {
            get: function () {
                return t._isSoundOpen
            }, set: function (e) {
                t._isSoundOpen = e, t._isSoundOpen ? t.setAllVolumeToDefault() : t.setAllVolume(0)
            }, enumerable: !0, configurable: !0
        }), t.registerSound = function (e, r, i) {
            if (void 0 === i && (i = 1), t.soundObject || (t.soundObject = new Object, t.defaultVolumeObject = new Object), t.soundObject[e]) throw new Error("该音乐名称已被注册");
            r.type = egret.Sound.MUSIC, t.soundObject[e] = r, t.defaultVolumeObject[e] = i
        }, t.initAllSoundWithExtreme = function () {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            for (var e in t.soundObject) t.playSound(e, 0, 1, 0, 0);
            t.stopAllSound()
        }, t.playSoundSingle = function (e, r, i, n, a) {
            if (void 0 === r && (r = 0), void 0 === i && (i = 1), void 0 === n && (n = r), void 0 === a && (a = NaN), !t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            t.stopAllSound(), t.playSound(e, r, i, n, a)
        }, t.playSound = function (e, r, i, n, a) {
            if (void 0 === r && (r = 0), void 0 === i && (i = 1), void 0 === n && (n = r), void 0 === a && (a = NaN), !t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            var o = t.soundObject[e];
            t.soundChannelObject || (t.soundChannelObject = new Object), t.soundChannelObject[e] && t.soundChannelObject[e].stop(), t.isOpen ? isNaN(a) && (a = t.defaultVolumeObject[e]) : a = 0, t.stopSound(e);
            var s, l = [e, i, n, a];
            0 != r && 1 != Math.ceil(i) && n != r ? (s = o.play(r, 1), s.addEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t)) : (s = o.play(n, i), 0 != i && s.addEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t)), s.volume = a, t.dataMap.editPair(s, l), t.soundChannelObject[e] = s
        }, t.onSoundComplete = function (e) {
            var r = e.currentTarget, i = t.dataMap.getObject(r);
            t.dataMap.deletePair(r);
            var n = i[0], a = i[1], o = i[2], s = i[3], l = t.soundObject[n];
            t.stopSound(n), 0 == Math.ceil(a) ? r = l.play(o, 0) : (r = l.play(o, Math.ceil(a) - 1), r.addEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t)), r.volume = s, t.dataMap.editPair(r, i), t.soundChannelObject[n] = r, r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t)
        }, t.onSoundEnd = function (e) {
            var r = e.currentTarget, i = t.dataMap.getObject(r), n = i[0];
            r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t), t.dataMap.deletePair(r), delete t.soundChannelObject[n]
        }, t.stopSound = function (e) {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            if (t.soundChannelObject || (t.soundChannelObject = new Object), t.soundChannelObject[e]) {
                var r = t.soundChannelObject[e];
                r.stop(), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t), t.dataMap.deletePair(r), delete t.soundChannelObject[e]
            }
        }, t.stopAllSound = function () {
            if (t.soundChannelObject) for (var e in t.soundChannelObject) {
                var r = t.soundChannelObject[e];
                r.stop(), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundComplete, t), r.removeEventListener(egret.Event.SOUND_COMPLETE, t.onSoundEnd, t), t.dataMap.deletePair(r), delete t.soundChannelObject[e]
            }
        }, t.setVolume = function (e, r) {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (t.soundChannelObject || (t.soundChannelObject = new Object), (t.isOpen || 0 == r) && t.soundChannelObject[e]) {
                var i = t.soundChannelObject[e];
                i.volume = r
            }
        }, t.setAllVolume = function (e) {
            if (t.soundChannelObject && (t.isOpen || 0 == e)) for (var r in t.soundChannelObject) {
                var i = t.soundChannelObject[r];
                i.volume = e
            }
        }, t.setVolumeToDefault = function (e) {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            if (t.soundChannelObject[e] && (t.isOpen || 0 == t.defaultVolumeObject[e])) {
                var r = t.soundChannelObject[e];
                r.volume = t.defaultVolumeObject[e]
            }
        }, t.setAllVolumeToDefault = function () {
            if (t.soundChannelObject) for (var e in t.soundChannelObject) {
                var r = t.soundChannelObject[e];
                r.volume = t.defaultVolumeObject[e]
            }
        }, t.setDefaultVolume = function (e, r) {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            t.defaultVolumeObject[e] = r
        }, t.getDefaultVolume = function (e) {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            return t.defaultVolumeObject[e]
        }, t.getSoundChannel = function (e) {
            if (!t.soundObject) throw new Error("该音乐尚未被注册和实例化");
            if (!t.soundObject[e]) throw new Error("该音乐尚未被注册和实例化");
            return t.soundChannelObject ? t.soundChannelObject[e] : void 0
        }, t
    }();
    e.dataMap = new HashMap, e.funMap = new HashMap, e._isSoundOpen = !0, t.SoundMusicManager = e, __reflect(e.prototype, "esm.SoundMusicManager")
}(esm || (esm = {}));
var localData;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
        }

        return t
    }();
    e.data = new t.DataValueObject, e.record = new t.RecordValueObject, e.birdHotAreaPoints = [[712.45, 51.5], [737.4, 67.5], [755.4, 76.5], [758.9, 61.5], [758.9, 48.5], [749.4, 34], [737.4, 7], [777.9, 30.5], [829.4, -1], [868.4, 7], [868.4, 55.5], [902.4, 67.5], [919.9, 73.5], [934.2, 127], [916.2, 137.5], [818.7, 160.7], [795.2, 160.7], [783.9, 109.2], [755.4, 115.2], [724.4, 143.5], [727.9, 113], [739.4, 92.5], [715.55, 76.5]], t.Cache = e, __reflect(e.prototype, "localData.Cache")
}(localData || (localData = {}));
var localData;
!function (t) {
    var e = function () {
        function t() {
        }

        return t
    }();
    e.awardStatus = 0, t.CommonVariable = e, __reflect(e.prototype, "localData.CommonVariable")
}(localData || (localData = {}));
var disDev;
!function (t) {
    var e = function (t) {
        function e(e, r, i, n, a, o) {
            void 0 === e && (e = 0), void 0 === r && (r = null), void 0 === i && (i = 0), void 0 === n && (n = 1), void 0 === a && (a = 1), void 0 === o && (o = !0);
            var s = t.call(this) || this;
            return s.backGroundBitmap = new egret.Bitmap, r && s.reconstruct(e, r, i, n, a, o), s
        }

        return __extends(e, t), e.prototype.reconstruct = function (t, e, r, i, n, a) {
            if (void 0 === e && (e = null), void 0 === r && (r = 0), void 0 === i && (i = 1), void 0 === n && (n = 1), void 0 === a && (a = !0), 1 > t) throw new Error("Texture对象列表长度不能小于1");
            if (1 > n || n > t) throw new Error("初始帧start超出有效范围");
            if (1 > i) throw new Error("Texture对象的序号长度不能小于1");
            var o = t - 1 + r, s = r + n - 1, l = this.checkAndCreateTexture(e + this.getFrameByDigits(s, i));
            this.$isPlaying = !1, this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.clearLoopPoint(), this.texturePrefix = e, this.min = Math.floor(r), this.max = Math.floor(o), this.start = Math.floor(s), this.digits = Math.floor(i), this.$totalFrames = this.max - this.min + 1, this.$currentFrame = this.start - this.min + 1, this.setDriver(), this.addChildAt(this.backGroundBitmap, 0), this.backGroundBitmap.texture = l, a && this.play(), this.callBackFunctionCollection = new Array
        }, e.prototype.checkAndCreateTexture = function (t) {
            this.$currentTextureName = t;
            var e = RES.getRes(t);
            return e || trace("无法获取有效的 Texture: " + t + "，请检查名称拼写，或确认是否已经正常加载该资源"), e
        }, e.prototype.addFrameScript = function (t, e, r, i) {
            if (void 0 === r && (r = this), void 0 === i && (i = !0), isNaN(Math.floor(t)) || Math.floor(t) < 0 || Math.floor(t) > this.totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection[Math.floor(t)] = e.bind(r), i && Math.floor(t) == this.start && this.executeFrameScript && this.callBackFunctionCollection[Math.floor(t)].call(null)
        }, e.prototype.addFrameScriptOnce = function (t, e, r, i) {
            if (void 0 === r && (r = this), void 0 === i && (i = !0), isNaN(Math.floor(t)) || Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection[Math.floor(t)] = function () {
                e.bind(r).call(null), this.removeFrameScript(Math.floor(t))
            }.bind(this), i && Math.floor(t) == this.start && this.executeFrameScript && this.callBackFunctionCollection[Math.floor(t)].call(null)
        }, e.prototype.removeFrameScript = function (t) {
            if (Math.floor(t) < 0 || Math.floor(t) > this.totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection && this.callBackFunctionCollection[Math.floor(t)] && delete this.callBackFunctionCollection[Math.floor(t)]
        }, e.prototype.play = function () {
            return 1 == this.$totalFrames ? void this.stop() : (this.$isPlaying = !0, void(this.$driverType == disTypes.DriverType.FRAME ? (this.addEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop())) : this.$driverType == disTypes.DriverType.TIMER && (this.timer || (this.timer = new egret.Timer(this.playInterval)), this.timer.addEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.delay = this.playInterval, this.timer.start())))
        }, e.prototype.gotoAndPlay = function (t) {
            if (1 == this.$totalFrames) return void this.stop();
            var e = this.$currentFrame;
            this.$currentFrame = Math.floor(t), this.$currentFrame < 1 ? this.$currentFrame = 1 : this.$currentFrame > this.totalFrames && (this.$currentFrame = this.totalFrames), this.start = this.$currentFrame - 1 + this.min;
            var r = this.checkAndCreateTexture(this.texturePrefix + this.getFrameByDigits(this.start, this.digits));
            this.backGroundBitmap.texture = r, this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null), this.play()
        }, e.prototype.stop = function () {
            this.$isPlaying = !1, this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.start = this.$currentFrame - 1 + this.min;
            var t = this.checkAndCreateTexture(this.texturePrefix + this.getFrameByDigits(this.start, this.digits));
            this.backGroundBitmap.texture = t
        }, e.prototype.gotoAndStop = function (t) {
            if (1 == this.$totalFrames) return void this.stop();
            var e = this.$currentFrame;
            this.$currentFrame = Math.floor(t), this.$currentFrame < 1 ? this.$currentFrame = 1 : this.$currentFrame > this.totalFrames && (this.$currentFrame = this.totalFrames), this.stop(), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.playHandler = function () {
            if (this.$isPlaying && this.executeDriverType) if (this.$driverType == disTypes.DriverType.FRAME) {
                for (this.currentInterval++; this.currentInterval >= 2 * this.playInterval;) if (this.currentInterval -= this.playInterval, this.autoNextFrame(!1), !this.$isPlaying) return;
                this.currentInterval >= this.playInterval && (this.currentInterval -= this.playInterval, this.autoNextFrame(!0))
            } else this.$driverType == disTypes.DriverType.TIMER && this.autoNextFrame()
        }, e.prototype.autoNextFrame = function (t) {
            if (void 0 === t && (t = !0), this.start <= this.max && this.start++, this.start > this.max && (this.isPlaying ? this.start = this.min : this.start = this.max), this.executeLoop && this.isPlaying && this.$currentFrame == this.$loopEndFrame && (this.start = this.$loopStartFrame - 1 + this.min), this.executeLoop && this.isPlaying && this.$currentFrame >= this.$loopStartFrame && this.$currentFrame <= this.$loopEndFrame && (this.driverType != this.$driverTypeOnLooping || this.$playIntervalOnLooping != this.playInterval) && this.setDriver(this.$driverTypeOnLooping, this.$playIntervalOnLooping), this.$currentFrame = this.start - this.min + 1, t) {
                var e = this.checkAndCreateTexture(this.texturePrefix + this.getFrameByDigits(this.start, this.digits));
                this.backGroundBitmap.texture = e
            }
            this.executeLoop && this.isPlaying && this.$currentFrame == this.$loopStartFrame && this.$currentFrame == this.$loopEndFrame && (trace("提示: 循环点的起始帧号与结束帧号相同, 自动停止播放"), this.stop()), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.autoPrevFrame = function (t) {
            if (void 0 === t && (t = !0), this.start > this.min && this.start--, this.start < this.min && (this.start = this.min), this.$currentFrame = this.start - this.min + 1, t) {
                var e = this.checkAndCreateTexture(this.texturePrefix + this.getFrameByDigits(this.start, this.digits));
                this.backGroundBitmap.texture = e
            }
            this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.nextFrame = function () {
            this.stop(), this.start < this.max && this.autoNextFrame()
        }, e.prototype.prevFrame = function () {
            this.stop(), this.start > this.min && this.autoPrevFrame()
        }, Object.defineProperty(e.prototype, "currentTextureName", {
            get: function () {
                return this.$currentTextureName
            }, enumerable: !0, configurable: !0
        }), e.prototype.getFrameByDigits = function (t, e) {
            1 > e && (e = 1), e = Math.floor(e);
            for (var r = t.toString(); r.length < e;) r = 0 + r;
            return r
        }, e.prototype.destroy = function () {
            t.prototype.destroy.call(this), this.backGroundBitmap && this.contains(this.backGroundBitmap) && this.removeChild(this.backGroundBitmap), this.callBackFunctionCollection = null
        }, e.prototype.setDriver = function (t, e) {
            if (void 0 === t && (t = disTypes.DriverType.FRAME), void 0 === e && (e = 1), 0 >= e) throw new Error("驱动间隔不能等于或小于0！");
            this.executeDriverType && (this.$driverType = t, this.playInterval = e, this.currentInterval = 0, t == disTypes.DriverType.FRAME && this.playInterval % 1 != 0 ? trace("提示: 当前采用逐帧驱动方式, playInterval不是整数(" + this.playInterval + "), 将会出现丢帧的情况") : t == disTypes.DriverType.TIMER && this.playInterval < 16 && trace("提示: 当前采用计时器驱动方式, playInterval低于下限16毫秒(" + this.playInterval + "), 将自动调整为 帧/16毫秒 的频率"), this.isPlaying && (this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.play()))
        }, Object.defineProperty(e.prototype, "driverType", {
            get: function () {
                return this.$driverType
            }, enumerable: !0, configurable: !0
        }), e
    }(t.AbstractAnimation);
    t.AnimationLite = e, __reflect(e.prototype, "disDev.AnimationLite")
}(disDev || (disDev = {}));
var disDev;
!function (t) {
    var e = function (t) {
        function e(e, r, i, n) {
            void 0 === e && (e = 1), void 0 === r && (r = null), void 0 === i && (i = 1), void 0 === n && (n = !0);
            var a = t.call(this) || this;
            return a.start = 1, a.$isAutoEnter = !1, a.reconstruct(e, r, i, n), a
        }

        return __extends(e, t), e.prototype.reconstruct = function (t, e, r, i) {
            if (void 0 === e && (e = null), void 0 === r && (r = 1), void 0 === i && (i = !0), 1 > t) throw new Error("totalFrames 不能小于1");
            if (this.$totalFrames = Math.floor(t), 1 > r || r > this.$totalFrames) throw new Error("startFrame 超出有效范围");
            this.$isPlaying = !1, this.destroy(), this.clearLoopPoint(), this.$currentFrame = Math.floor(r), this.start = this.$currentFrame, this.setDriver(), e && e.length > 0 && (this.resetAnimations(e), i ? this.gotoAndPlay(this.start) : this.gotoAndStop(this.start)), this.callBackFunctionCollection = new Array
        }, e.prototype.resetAnimations = function (t) {
            for (; this.numChildren > 0;) this.removeChildAt(0);
            this.anmArray = new Array;
            for (var e = 0; e < t.length; e++) this.addAnimation(t[e])
        }, e.prototype.addAnimation = function (t) {
            return this.addAnimationAt(t, this.numChildren)
        }, e.prototype.addAnimationAt = function (t, e) {
            if (this.anmArray || (this.anmArray = new Array), this.$totalFrames != t.totalFrames) throw new Error("子动画与" + this.__class__ + "的 totalFrames 不一致");
            this.anmArray.push(t), t.executeFrameScript = !1, t.executeLoop = !1, t.executeDriverType = !1;
            var r = t;
            return this.addChildAt(r, e), t
        }, e.prototype.setAnimationIndex = function (t, e) {
            this.setChildIndex(t, e)
        }, e.prototype.removeAnimation = function (t) {
            this.removeChild(t)
        }, e.prototype.removeAnimationAt = function (t) {
            this.removeChildAt(t)
        }, e.prototype.stepAllLayer = function () {
            for (var t = 0; t < this.anmArray.length; t++) this.anmArray[t].gotoAndStop(this.currentFrame)
        }, e.prototype.addFrameScript = function (t, e, r, i) {
            if (void 0 === r && (r = this), void 0 === i && (i = !0), isNaN(Math.floor(t)) || Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection[Math.floor(t)] = e.bind(r), i && Math.floor(t) == this.start && this.executeFrameScript && this.callBackFunctionCollection[Math.floor(t)].call(null)
        }, e.prototype.addFrameScriptOnce = function (t, e, r, i) {
            if (void 0 === r && (r = this), void 0 === i && (i = !0), isNaN(Math.floor(t)) || Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection[Math.floor(t)] = function () {
                e.bind(r).call(null), this.removeFrameScript(Math.floor(t))
            }.bind(this), i && Math.floor(t) == this.start && this.executeFrameScript && this.callBackFunctionCollection[Math.floor(t)].call(null)
        }, e.prototype.removeFrameScript = function (t) {
            if (Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection && this.callBackFunctionCollection[Math.floor(t)] && delete this.callBackFunctionCollection[Math.floor(t)]
        }, e.prototype.play = function () {
            return 1 == this.$totalFrames ? void this.stop() : (this.$isPlaying = !0, this.$driverType == disTypes.DriverType.FRAME ? (this.addEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop())) : this.$driverType == disTypes.DriverType.TIMER && (this.timer || (this.timer = new egret.Timer(this.playInterval)), this.timer.addEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.delay = this.playInterval, this.timer.start()), void this.stepAllLayer())
        }, e.prototype.gotoAndPlay = function (t) {
            if (1 == this.$totalFrames) return void this.stop();
            this.$isAutoEnter = !1;
            var e = this.$currentFrame;
            this.$currentFrame = Math.floor(t), this.$currentFrame < 1 ? this.$currentFrame = 1 : this.$currentFrame > this.$totalFrames && (this.$currentFrame = this.$totalFrames), this.start = this.$currentFrame, this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null), this.play()
        }, e.prototype.stop = function () {
            this.$isPlaying = !1, this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.start = this.$currentFrame, this.stepAllLayer()
        }, e.prototype.gotoAndStop = function (t) {
            if (1 == this.$totalFrames) return void this.stop();
            this.$isAutoEnter = !1;
            var e = this.$currentFrame;
            this.$currentFrame = Math.floor(t), this.$currentFrame < 1 ? this.$currentFrame = 1 : this.$currentFrame > this.$totalFrames && (this.$currentFrame = this.$totalFrames), this.stop(), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.playHandler = function () {
            if (this.$isPlaying && this.executeDriverType) if (this.$driverType == disTypes.DriverType.FRAME) {
                for (this.currentInterval++; this.currentInterval >= 2 * this.playInterval;) if (this.currentInterval -= this.playInterval, this.autoNextFrame(!1), !this.$isPlaying) return;
                this.currentInterval >= this.playInterval && (this.currentInterval -= this.playInterval, this.autoNextFrame(!0))
            } else this.$driverType == disTypes.DriverType.TIMER && this.autoNextFrame()
        }, e.prototype.autoNextFrame = function (t) {
            void 0 === t && (t = !0), this.$isAutoEnter = !0, this.start <= this.$totalFrames && this.start++, this.start > this.$totalFrames && (this.isPlaying ? this.start = 1 : this.start = this.$totalFrames), this.executeLoop && this.isPlaying && this.$currentFrame == this.$loopEndFrame && (this.start = this.$loopStartFrame);
            var e = this.$currentFrame;
            this.$currentFrame = this.start, this.executeLoop && this.isPlaying && this.start == this.$loopStartFrame && this.start == this.$loopEndFrame && (trace("提示: 循环点的起始帧号与结束帧号相同, 自动停止播放"), this.stop()), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null), this.$isPlaying && this.stepAllLayer()
        }, e.prototype.autoPrevFrame = function (t) {
            void 0 === t && (t = !0), this.start > 1 && (this.start--, this.$isAutoEnter = !0), this.start < 1 && (this.start = 1), this.$currentFrame = this.start, this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && this.callBackFunctionCollection[this.$currentFrame - 1].call(null), this.stepAllLayer()
        }, e.prototype.nextFrame = function () {
            this.stop(), this.start < this.$totalFrames && this.autoNextFrame()
        }, e.prototype.prevFrame = function () {
            this.stop(), this.start > 1 && this.autoPrevFrame()
        }, Object.defineProperty(e.prototype, "isAutoEnter", {
            get: function () {
                return this.$isAutoEnter
            }, enumerable: !0, configurable: !0
        }), e.prototype.destroy = function () {
            for (t.prototype.destroy.call(this); this.numChildren > 0;) {
                if (egret.is(this.getChildAt(0), "disDev.AbstractAnimation")) {
                    var e = this.getChildAt(0);
                    e.destroy()
                }
                this.removeChildAt(0)
            }
            this.anmArray = null
        }, e.prototype.setDriver = function (t, e) {
            if (void 0 === t && (t = disTypes.DriverType.FRAME), void 0 === e && (e = 1), 0 >= e) throw new Error("驱动间隔不能等于或小于0！");
            this.executeDriverType && (this.$driverType = t, this.playInterval = e, this.$driverTypeOnLooping = this.$driverType, this.$playIntervalOnLooping = this.playInterval, this.currentInterval = 0, t == disTypes.DriverType.FRAME && this.playInterval % 1 != 0 ? trace("提示: 当前采用逐帧驱动方式, playInterval不是整数(" + this.playInterval + "), 将会出现丢帧的情况") : t == disTypes.DriverType.TIMER && this.playInterval < 16 && trace("提示: 当前采用计时器驱动方式, playInterval低于下限16毫秒(" + this.playInterval + "), 将自动调整为 帧/16毫秒 的频率"), this.isPlaying && (this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.play()))
        }, Object.defineProperty(e.prototype, "frameInterval", {
            set: function (t) {
                this.setDriver(disTypes.DriverType.FRAME, t)
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "timerInterval", {
            set: function (t) {
                this.setDriver(disTypes.DriverType.TIMER, t)
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "driverType", {
            get: function () {
                return this.$driverType
            }, enumerable: !0, configurable: !0
        }), e
    }(t.AbstractAnimation);
    t.AnimationMerger = e, __reflect(e.prototype, "disDev.AnimationMerger")
}(disDev || (disDev = {}));
var disDev;
!function (t) {
    var e = function (t) {
        function e(e, r, i) {
            void 0 === e && (e = null), void 0 === r && (r = e), void 0 === i && (i = e);
            var n = t.call(this) || this;
            return e && n.reconstruct(e, r, i), n
        }

        return __extends(e, t), e.prototype.reconstruct = function (t, e, r) {
            void 0 === e && (e = t), void 0 === r && (r = t), this.$normalTexture = t, this.$pressTexture = e, this.$disabledTexture = r, this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this), this.stage && (this.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.touchEnd, this), this.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.touchMove, this)), this.turnNormal(), this.touchEnabled = !0, this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this)
        }, e.prototype.setScale9Grids = function (t) {
            this.normalScale9Grid = t.normalGrid,
                this.pressScale9Grid = t.pressGrid, this.disabledScale9Grid = t.disabledGrid
        }, e.prototype.onTouchBegin = function (t) {
            this.turnPress(), this.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.touchEnd, this), this.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.touchMove, this)
        }, e.prototype.touchMove = function (t) {
            var e = this.globalToLocal(t.stageX, t.stageY), r = this.getBounds(),
                i = new egret.Rectangle(r.x + this.anchorOffsetX, r.y + this.anchorOffsetY, r.width, r.height);
            e.x < i.x || e.y < i.y || e.x > i.x + i.width || e.y > i.y + i.height ? "normal" != this.$currentTexture && this.turnNormal() : "press" != this.$currentTexture && this.turnPress()
        }, e.prototype.touchEnd = function (t) {
            this.turnNormal(), this.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.touchEnd, this), this.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.touchMove, this)
        }, e.prototype.turnNormal = function () {
            this.scale9Grid = this.$normalScale9Grid, this.texture = RES.getRes(this.$normalTexture), this.$currentTexture = "normal"
        }, e.prototype.turnPress = function () {
            this.scale9Grid = this.$pressScale9Grid, this.texture = RES.getRes(this.$pressTexture), this.$currentTexture = "press"
        }, e.prototype.turnDisabled = function () {
            this.scale9Grid = this.$disabledScale9Grid, this.texture = RES.getRes(this.$disabledTexture), this.$currentTexture = "disabled"
        }, Object.defineProperty(e.prototype, "touchEnabled", {
            get: function () {
                return this.$touchEnabled
            }, set: function (e) {
                this.$touchEnabled != e && (0 == e ? (this.touchEnd(null), this.turnDisabled()) : 1 == e && this.turnNormal(), t.prototype.$setTouchEnabled.call(this, e), this.$touchEnabled = e)
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "normalScale9Grid", {
            get: function () {
                return this.$normalScale9Grid
            }, set: function (t) {
                this.$normalScale9Grid = t, "normal" == this.$currentTexture && this.turnNormal()
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "pressScale9Grid", {
            get: function () {
                return this.$pressScale9Grid
            }, set: function (t) {
                this.$pressScale9Grid = t, "press" == this.$currentTexture && this.turnPress()
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "disabledScale9Grid", {
            get: function () {
                return this.$disabledScale9Grid
            }, set: function (t) {
                this.$disabledScale9Grid = t, "disabled" == this.$currentTexture && this.turnDisabled()
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "scaleWidth", {
            get: function () {
                return this.width * this.scaleX
            }, set: function (t) {
                this.scaleX = t / this.width
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "scaleHeight", {
            get: function () {
                return this.height * this.scaleY
            }, set: function (t) {
                this.scaleY = t / this.height
            }, enumerable: !0, configurable: !0
        }), e.prototype.destroy = function () {
            this.texture = null
        }, e
    }(egret.Bitmap);
    t.ButtonLite = e, __reflect(e.prototype, "disDev.ButtonLite", ["disDev.IDisplayObjectLite", "egret.IEventDispatcher"])
}(disDev || (disDev = {}));
var Scale9Grids = function () {
    function t(t, e, r) {
        void 0 === e && (e = t), void 0 === r && (r = t), this.normalGrid = t, this.pressGrid = e, this.disabledGrid = r
    }

    return t
}();
__reflect(Scale9Grids.prototype, "Scale9Grids");
var disDev;
!function (t) {
    var e = function (t) {
        function e(e) {
            var r = t.call(this) || this;
            r.fcoArray = e, r.frameDisplayObjectsArray = new Object, r.labelFromIndex = new Object, r.indexFromLabel = new Object, r.continuationFromIndex = new Object, r.layerFromIndex = new Object;
            for (var i = 0; i < e.length; i++) {
                var n = e[i].frame - 1;
                r.frameDisplayObjectsArray[n] = e[i].classNameArray, r.indexFromLabel["label_" + e[i].frameLabel] = n, r.labelFromIndex[n] = e[i].frameLabel, r.continuationFromIndex = e[i].continuation, r.layerFromIndex = e[i].layer
            }
            return r
        }

        return __extends(e, t), e.prototype.gotoAndStop = function (t) {
        }, Object.defineProperty(e.prototype, "scaleWidth", {
            get: function () {
                return this.width * this.scaleX
            }, set: function (t) {
                this.scaleX = t / this.width
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "scaleHeight", {
            get: function () {
                return this.height * this.scaleY
            }, set: function (t) {
                this.scaleY = t / this.height
            }, enumerable: !0, configurable: !0
        }), e.prototype.destroy = function () {
        }, e
    }(egret.Sprite);
    t.MovieClipPlus = e, __reflect(e.prototype, "disDev.MovieClipPlus", ["disDev.IDisplayObjectLite", "egret.IEventDispatcher"])
}(disDev || (disDev = {}));
var FrameContentObject = function () {
    function t(t, e, r, i, n) {
        void 0 === e && (e = null), void 0 === r && (r = null), void 0 === i && (i = 1), void 0 === n && (n = 0), this.frame = 0, this.frame = 1 > t ? 1 : Math.floor(t), this.classNameArray = e, this.frameLabel = r, this.continuation = 1 > i ? 1 : Math.floor(i), this.layer = n
    }

    return t
}();
__reflect(FrameContentObject.prototype, "FrameContentObject");
var TypeAndName = function () {
    function t(t, e) {
        this.classType = t, this.instanceName = e
    }

    return t
}();
__reflect(TypeAndName.prototype, "TypeAndName");
var disTypes;
!function (t) {
    var e;
    !function (t) {
        t[t.TopAndLeft = 0] = "TopAndLeft", t[t.TopAndMiddle = 1] = "TopAndMiddle", t[t.TopAndRight = 2] = "TopAndRight", t[t.MiddleAndLeft = 3] = "MiddleAndLeft", t[t.Center = 4] = "Center", t[t.MiddleAndRight = 5] = "MiddleAndRight", t[t.BottomAndLeft = 6] = "BottomAndLeft", t[t.BottomAndMiddle = 7] = "BottomAndMiddle", t[t.BottomAndRight = 8] = "BottomAndRight"
    }(e = t.BitmapAlignEnum || (t.BitmapAlignEnum = {}))
}(disTypes || (disTypes = {}));
var disTypes;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
        }

        return t
    }();
    e.FRAME = "runFrame", e.TIMER = "runTimer", t.DriverType = e, __reflect(e.prototype, "disTypes.DriverType")
}(disTypes || (disTypes = {}));
var SubjectTypes = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t
}();
SubjectTypes.LINK_FAULT = "linkFault", SubjectTypes.DYNAMIC_COMPLETE = "dynamic_complete", SubjectTypes.APP_START = "appStart", SubjectTypes.OVER_TIME = "overTime", SubjectTypes.GET_DATA = "getData", SubjectTypes.GET_RECORD = "getRecord", SubjectTypes.GAME_START = "gameStart", SubjectTypes.GET_NEWDATA = "getNewData", SubjectTypes.GET_NUMBER = "getNumber", SubjectTypes.GAME_END = "gameEnd", SubjectTypes.GAME_INIT = "gameInit", SubjectTypes.SWORD_SHAKE = "swordShake", SubjectTypes.SWORD_OUT = "swordOut", SubjectTypes.BIRD_OUT = "birdOut", SubjectTypes.SHOW_VICTORY = "showVictory", SubjectTypes.DROP_DOWN = "dropDown", __reflect(SubjectTypes.prototype, "SubjectTypes");
var connect;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
        }

        return Object.defineProperty(t, "CONNECT_COMPLETE", {
            get: function () {
                return "connect complete"
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(t, "CONNECT_FAULT", {
            get: function () {
                return "connect fault"
            }, enumerable: !0, configurable: !0
        }), t.load = function (e) {
            "string" == typeof e && (e = JSON.parse(e)), t.object.total = e.loading.length + e.game.length, t.object.current = 0;
            for (var r = 0; r < e.loading.length; r++) if (e.loading[r].url && "" != e.loading[r].url) {
                var i = new egret.ImageLoader;
                i.once(egret.Event.COMPLETE, this.completeHandler, this), i.once(egret.IOErrorEvent.IO_ERROR, this.errorHandler, this), t.loadingAssets.push(e.loading[r].key), editHashPair(i, e.loading[r]), i.load(InitConfig.res_path + e.loading[r].url)
            } else t.object.current++;
            for (var n = 0; n < e.game.length; n++) if (e.game[n].url && "" != e.game[n].url) {
                var i = new egret.ImageLoader;
                i.once(egret.Event.COMPLETE, this.completeHandler, this), i.once(egret.IOErrorEvent.IO_ERROR, this.errorHandler, this), t.gameAssets.push(e.game[n].key), editHashPair(i, e.game[n]), i.load(InitConfig.res_path + e.game[n].url)
            } else t.object.current++
        }, t.completeHandler = function (e) {
            var r = e.currentTarget, i = r.data, n = new egret.Bitmap(i), a = getHashObject(r).property;
            for (var o in a) n[o] = Number(a[o]);
            t.object[getHashObject(r).key] = n, deleteHashPair(r), t.object.current++, t.object.current == t.object.total && ConcreteSubject.notify(SubjectTypes.DYNAMIC_COMPLETE)
        }, t.errorHandler = function (e) {
            var r = e.currentTarget;
            deleteHashPair(r), t.object.current++, t.object.current == t.object.total && ConcreteSubject.notify(SubjectTypes.DYNAMIC_COMPLETE)
        }, t
    }();
    e.loadingAssets = [], e.gameAssets = [], e.object = new Object, t.DynamicLoader = e, __reflect(e.prototype, "connect.DynamicLoader")
}(connect || (connect = {}));
var AboutBrowser = function () {
    function t() {
    }

    return t.getInfo = function () {
        var t = new BrowserInfo, e = navigator.userAgent;
        return e.indexOf("UCBrowser") > -1 ? (t.browserKey = "UCBrowser", t.description = "您当前使用的是：UC浏览器") : e.indexOf("2345Browser") > -1 ? (t.browserKey = "2345Browser", t.description = "您当前使用的是：2345浏览器") : e.indexOf("JiSuLiuLanQiHD") > -1 ? (t.browserKey = "JiSuLiuLanQiHD", t.description = "您当前使用的是：极速浏览器HD") : e.indexOf("searchBrowser") > -1 ? (t.browserKey = "searchBrowser", t.description = "您当前使用的是：极速浏览器") : e.indexOf("CriOS") > -1 ? (t.browserKey = "CriOS", t.description = "您当前使用的是：谷歌浏览器(ios)") : e.indexOf("MQQBrowser") > -1 ? (t.browserKey = "MQQBrowser", t.description = "您当前使用的是：QQ浏览器") : e.indexOf("OPiOS") > -1 ? (t.browserKey = "OPiOS", t.description = "您当前使用的是：欧朋浏览器(ios)") : e.indexOf("baidubrowser") > -1 ? (t.browserKey = "baidubrowser", t.description = "您当前使用的是：百度浏览器") : e.indexOf("FlyFlow") > -1 ? (t.browserKey = "FlyFlow", t.description = "您当前使用的是：百度FlyFlow浏览器") : e.indexOf("BaiduHD") > -1 ? (t.browserKey = "BaiduHD", t.description = "您当前使用的是：百度浏览器HD") : e.indexOf("FxiOS") > -1 ? (t.browserKey = "FxiOS", t.description = "您当前使用的是：火狐浏览器(ios)") : e.indexOf("FingerBrowser") > -1 ? (t.browserKey = "FingerBrowser", t.description = "您当前使用的是：指尖浏览器") : e.indexOf("MXiOS") > -1 ? (t.browserKey = "MXiOS", t.description = "您当前使用的是：遨游云浏览器(ios)") : e.indexOf("MxBrowser") > -1 ? (t.browserKey = "MxBrowser", e.indexOf("Android") > -1 ? t.description = "您当前使用的是：遨游云浏览器(android)" : t.description = "您当前使用的是：遨游云浏览器") : e.indexOf("LieBaoFast") > -1 ? (t.browserKey = "LieBaoFast", t.description = "您当前使用的是：猎豹浏览器") : e.indexOf("360 Aphone Browser") > -1 ? (t.browserKey = "360 Aphone Browser", t.description = "您当前使用的是：360 Aphone浏览器") : e.indexOf("HaoWangZhiDaQuanHD") > -1 ? (t.isAdvise = !0, t.browserKey = "HaoWangZhiDaQuanHD", t.description = "您当前使用的是：好网址大全浏览器。为了更好的体验，建议更换其他主流浏览器打开本页面") : e.indexOf("SogouMobileBrowser") > -1 ? (t.browserKey = "SogouMobileBrowser", t.description = "您当前使用的是：搜狗浏览器") : e.indexOf("Firefox") > -1 ? (t.browserKey = "Firefox", e.indexOf("Android") > -1 ? t.description = "您当前使用的是：火狐浏览器(android)" : t.description = "您当前使用的是：火狐浏览器") : e.indexOf("Chrome") > -1 && e.indexOf("Safari") > -1 ? (t.browserKey = "Chrome&Safari", e.indexOf("Android") > -1 ? t.description = "您当前使用的是：谷歌或其他无法识别的谷歌内核浏览器(android)" : t.description = "您当前使用的是：谷歌或其他无法识别的谷歌内核浏览器") : e.indexOf(" OPR") > -1 && e.indexOf("Safari") > -1 ? (t.browserKey = "OPR&Safari", e.indexOf("Android") > -1 ? t.description = "您当前使用的是：欧朋浏览器(android)" : t.description = "您当前使用的是：欧朋浏览器") : e.indexOf("Chrome") > -1 ? (t.browserKey = "Chrome", t.isAdvise = !0, t.description = "您当前使用的浏览器属于Chrome类型，具体名称不详。为了更好的体验，建议更换其他主流浏览器打开本页面") : e.indexOf("Safari") > -1 ? (t.isAdvise = !0, t.description = "您当前使用的是：Safari或无法识别的Safari类型浏览器") : (t.isAdvise = !0, t.description = "您当前使用的浏览器具体名称不详。为了更好的体验，建议更换其他主流浏览器打开本页面"), t
    }, t
}();
AboutBrowser.browserKeyCollection = ["UCBrowser", "2345Browser", "JiSuLiuLanQiHD", "searchBrowser", "CriOS", "MQQBrowser", "OPiOS", "BaiduHD", "FlyFlow", "baidubrowser", "FxiOS", "FingerBrowser", "MXiOS", "MxBrowser", "LieBaoFast", "HaoWangZhiDaQuanHD", "SogouMobileBrowser", "360 Aphone Browser", "Chrome", "Firefox", "OPR"], __reflect(AboutBrowser.prototype, "AboutBrowser");
var BrowserInfo = function () {
    function t() {
        this.isAdvise = !1, this.description = "您当前使用的浏览器是：不知名浏览器，为了更好的体验，建议更换其他浏览器打开本页面"
    }

    return t
}();
__reflect(BrowserInfo.prototype, "BrowserInfo");
var ActivateRunTimes = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t.start = function () {
        t.timer && (t.timer.stop(), t.timer.removeEventListener(egret.TimerEvent.TIMER, t.timerHandler, t)), t.$activateRunTime = 0, t.$lastStepTime = egret.getTimer(), t.atStart = t.$lastStepTime, t.getTimerOnStart = t.$lastStepTime, t.timer = new egret.Timer(t.delta), t.timer.addEventListener(egret.TimerEvent.TIMER, t.timerHandler, t), t.timer.start(), t.$isStartUsing = !0
    }, t.stop = function () {
        t.timer && (t.timer.stop(), t.timer.removeEventListener(egret.TimerEvent.TIMER, t.timerHandler, t)), t.$isStartUsing = !1
    }, t.addCallbackBeforeStep = function (e, r, i) {
        t.beforeFunHashMap.editPair(e, r.bind(i))
    }, t.removeCallbackBeforeStep = function (e) {
        t.beforeFunHashMap.deletePair(e)
    }, t.addCallbackAfterStep = function (e, r, i) {
        t.afterFunHashMap.editPair(e, r.bind(i))
    }, t.removeCallbackAfterStep = function (e) {
        t.afterFunHashMap.deletePair(e)
    }, t.timerHandler = function () {
        t.funArray = t.beforeFunHashMap.getObjectListCopy();
        for (var e in t.funArray) t.funArray[e].call(null);
        t.$activateRunTime += t.delta, t.$lastStepTime = egret.getTimer(), t.funArray = t.afterFunHashMap.getObjectListCopy();
        for (var r in t.funArray) t.funArray[r].call(null)
    }, Object.defineProperty(t, "isStartUsing", {
        get: function () {
            return t.$isStartUsing
        }, enumerable: !0, configurable: !0
    }), Object.defineProperty(t, "activateTimes", {
        get: function () {
            return t.$isStartUsing ? Math.round(t.$activateRunTime) : (trace("ActivateRunTimes.start() 未被启用"), NaN)
        }, enumerable: !0, configurable: !0
    }), Object.defineProperty(t, "startedTimes", {
        get: function () {
            return t.$isStartUsing ? Math.round(egret.getTimer() - t.getTimerOnStart) : (trace("ActivateRunTimes.start() 未被启用"), NaN)
        }, enumerable: !0, configurable: !0
    }), Object.defineProperty(t, "deviationTotalTimes", {
        get: function () {
            return t.$isStartUsing ? Math.round(t.startedTimes - t.$activateRunTime) : (trace("ActivateRunTimes.start() 未被启用"), NaN)
        }, enumerable: !0, configurable: !0
    }), Object.defineProperty(t, "deviationCurrentTimes", {
        get: function () {
            return t.$isStartUsing ? Math.round(egret.getTimer() - t.$lastStepTime) : (trace("ActivateRunTimes.start() 未被启用"), NaN)
        }, enumerable: !0, configurable: !0
    }), t
}();
ActivateRunTimes.delta = 1e3 / 60, ActivateRunTimes.funArray = new Array, ActivateRunTimes.beforeFunHashMap = new HashMap, ActivateRunTimes.afterFunHashMap = new HashMap, __reflect(ActivateRunTimes.prototype, "ActivateRunTimes");
var DragonBonesDataTree = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t.read = function (e, r) {
        void 0 === r && (r = !1), t.detailed = r;
        var i = new egret.URLLoader;
        i.addEventListener(egret.Event.COMPLETE, t.onComplete, t), i.addEventListener(egret.IOErrorEvent.IO_ERROR, t.onError, t), i.load(new egret.URLRequest(e))
    }, t.onError = function (t) {
        trace("读取信息错误,请检查url是否正确")
    }, t.onComplete = function (e) {
        var r = JSON.parse(e.target.data), i = r.armature;
        trace("数据版本:", r.version), trace("帧频:", r.frameRate, "fps"), trace("文件名:", r.name);
        for (var n = 0, a = 0; a < i.length; a++) i[a] && i[a].name && n++;
        if (trace("骨架数量:", n), t.detailed) {
            trace("骨架名称:");
            for (var a = 0; a < i.length; a++) i[a] && i[a].name && trace("    [" + a + "] " + i[a].name)
        }
        for (a = 0; a < i.length; a++) {
            trace("\n\n    " + r.name + " 数据骨架列表节点下标为 [" + a + "] 的骨架名称(urlLoaderData.armature[" + a + "].name):", i[a].name), t.detailed && trace("\n        urlLoaderData.armature[" + a + "] 拥有以下子节点对象：");
            var o, s = i[a];
            if (t.detailed) for (o in s) trace("                                " + o);
            o = "animation";
            var l = s.animation;
            trace("\n        urlLoaderData.armature[" + a + "] 节点的骨骼动画信息列表(长度为 " + l.length + "):");
            for (var c in l) t.detailed ? Number(r.version) >= 4 ? trace("                                动画名称(animation[" + c + "].name):" + l[c].name, "  总帧数(animation[" + c + "].duration):" + (l[c].duration + 1), "  默认循环次数(animation[" + c + "].playTimes):" + (void 0 == l[c].playTimes ? 1 : l[c].playTimes), "  预计默认循环耗时:" + (l[c].duration / r.frameRate).toFixed(4)) : trace("                                动画名称(animation[" + c + "].name):" + l[c].name, "  总帧数(animation[" + c + "].duration):" + (l[c].duration + 1), "  默认循环次数(animation[" + c + "].loop):" + (void 0 == l[c].loop ? 1 : l[c].loop), "  预计默认循环耗时:" + (l[c].duration / r.frameRate).toFixed(4)) : trace("                                " + l[c].name);
            o = "bone";
            var h, u = s.bone;
            if (s.slot && (h = s.slot.concat()), Number(r.version) < 4 && i[a].skin && i[a].skin.length && (h = i[a].skin[0].slot.concat(), i[a].skin.length > 1)) for (var d = 1; d < i[a].skin.length; d++) i[a].skin[d].slot && h.concat(i[a].skin[d].slot);
            trace("\n        urlLoaderData.armature[" + a + "] 节点的骨骼部件名称列表(长度为 " + u.length + "):");
            for (var m in u) {
                var p = "undefined";
                for (var y in h) {
                    var f = h[y];
                    if (Number(r.version) >= 4) {
                        if (f.parent && f.parent == u[m].name) {
                            p = f.name;
                            break
                        }
                    } else if (f.name == u[m].name) {
                        p = f.name;
                        break
                    }
                }
                t.detailed ? "undefined" == p ? trace("                                骨骼名称(bone[" + m + "].name):" + u[m].name, "  ---未绑定插槽---") : Number(r.version) >= 4 ? trace("                                骨骼名称(bone[" + m + "].name):" + u[m].name, "  绑定插槽名称(slot[" + y + "].name):" + p) : trace("                                骨骼名称(bone[" + m + "].name):" + u[m].name, "  绑定插槽名称(skin[0].slot[" + y + "].name):" + p) : trace("                                " + u[m].name)
            }
        }
        trace("\n")
    }, t
}();
__reflect(DragonBonesDataTree.prototype, "DragonBonesDataTree");
var FrameDelayCaller = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t.addCallerOnce = function (e, r, i, n) {
        for (var a = [], o = 4; o < arguments.length; o++) a[o - 4] = arguments[o];
        return t.addCallerRepeat.apply(t, [e, r, i, n, 1].concat(a))
    }, t.addCallerRepeat = function (e, r, i, n, a) {
        void 0 === a && (a = 0);
        for (var o = [], s = 5; s < arguments.length; s++) o[s - 5] = arguments[s];
        if (1 > n && (n = 1, trace("提示：间隔帧数intervalFrames 不应该小于1")), null == r) throw new Error("错误：提供给 FrameDelayCaller 的回调函数不能为null");
        var l;
        t.objKeyFromCallerHash.getObject(e) ? l = t.objKeyFromCallerHash.getObject(e) : (t.$objID++, l = "objKey" + t.$objID, t.objKeyFromCallerHash.editPair(e, l)), t.idArrFromObjKey[l] || (t.idArrFromObjKey[l] = new Array), t.$useAbleID++;
        var c = new egret.Shape, h = "runnerKey" + t.$useAbleID;
        t.runnerKeyFromRunnerHash.editPair(c, h), t.idFromRunnerKey[h] = t.$useAbleID, t.functionFromID[t.$useAbleID] = r.bind(i), t.runnerFromID[t.$useAbleID] = c, t.currentFramesFromID[t.$useAbleID] = 0, t.intervalFramesFromID[t.$useAbleID] = Math.floor(n), t.currentRepeatsFromID[t.$useAbleID] = 0, t.totalRepeatsFromID[t.$useAbleID] = a, t.paramsFromID[t.$useAbleID] = o, t.isPauseFromID[t.$useAbleID] = "run", t.objKeyFromID[t.$useAbleID] = l;
        var u = t.idArrFromObjKey[l];
        return u.push(t.$useAbleID), c.addEventListener(egret.Event.ENTER_FRAME, t.frameHandler, t), t.$useAbleID
    }, t.frameHandler = function (e) {
        var r = e.currentTarget, i = t.runnerKeyFromRunnerHash.getObject(r), n = t.idFromRunnerKey[i];
        if ("pause" != t.isPauseFromID[n] && (t.currentFramesFromID[n]++, !(t.currentFramesFromID[n] < t.intervalFramesFromID[n]))) {
            t.currentFramesFromID[n] = 0, t.currentRepeatsFromID[n]++, t.$currentID = n, t.$currentRepeats = t.currentRepeatsFromID[n];
            var a = t.functionFromID[n], o = t.paramsFromID[n];
            a.apply(null, o), t.currentRepeatsFromID[n] >= t.totalRepeatsFromID[n] && t.totalRepeatsFromID[n] > 0 && t.clearCallerByID(n), t.$currentID = NaN, t.$currentRepeats = NaN
        }
    }, t.clearCallerByID = function (e) {
        var r = e;
        if (t.runnerFromID[r]) {
            var i = t.runnerFromID[r], n = t.runnerKeyFromRunnerHash.getObject(i), a = t.objKeyFromID[r];
            delete t.idFromRunnerKey[n], delete t.runnerFromID[r], delete t.functionFromID[r], delete t.paramsFromID[r], delete t.currentFramesFromID[r], delete t.intervalFramesFromID[r], delete t.currentRepeatsFromID[r], delete t.totalRepeatsFromID[r], delete t.isPauseFromID[r], delete t.objKeyFromID[r];
            var o = t.idArrFromObjKey[a], s = o.indexOf(r);
            o.splice(s, 1), 0 == o.length && (t.objKeyFromCallerHash.reverseDeletePair(a), delete t.idArrFromObjKey[a]), t.runnerKeyFromRunnerHash.deletePair(i), i.removeEventListener(egret.Event.ENTER_FRAME, t.frameHandler, t)
        }
    }, t.clearCallerAt = function (e) {
        if (t.objKeyFromCallerHash.getObject(e)) {
            var r = t.objKeyFromCallerHash.getObject(e), i = t.idArrFromObjKey[r], n = i.concat();
            for (var a in n) t.clearCallerByID(n[a])
        }
    }, t.clearAllCallers = function () {
        for (var e in t.idFromRunnerKey) t.clearCallerByID(t.idFromRunnerKey[e]);
        t.$useAbleID = 0, t.$objID = 0
    }, t.isPause = function (e) {
        var r = e;
        return !!t.runnerFromID[r] && "pause" == t.isPauseFromID[r]
    }, t.pauseCallerByID = function (e) {
        var r = e;
        if (t.runnerFromID[r] && !t.isPause(e)) {
            var i = t.runnerFromID[r];
            i.removeEventListener(egret.Event.ENTER_FRAME, t.frameHandler, t), t.isPauseFromID[r] = "pause"
        }
    }, t.pauseCallerAt = function (e) {
        if (t.objKeyFromCallerHash.getObject(e)) {
            var r = t.objKeyFromCallerHash.getObject(e), i = t.idArrFromObjKey[r], n = i.concat();
            for (var a in n) t.pauseCallerByID(n[a])
        }
    }, t.pauseAllCallers = function () {
        for (var e in t.idFromRunnerKey) t.pauseCallerByID(t.idFromRunnerKey[e])
    }, t.resumeCallerByID = function (e) {
        var r = e;
        if (t.runnerFromID[r] && t.isPause(e)) {
            var i = t.runnerFromID[r];
            i.addEventListener(egret.Event.ENTER_FRAME, t.frameHandler, t), t.isPauseFromID[r] = "run"
        }
    }, t.resumeCallerAt = function (e) {
        if (t.objKeyFromCallerHash.getObject(e)) {
            var r = t.objKeyFromCallerHash.getObject(e), i = t.idArrFromObjKey[r], n = i.concat();
            for (var a in n) t.resumeCallerByID(n[a])
        }
    }, t.resumeAllCallers = function () {
        for (var e in t.idFromRunnerKey) t.resumeCallerByID(t.idFromRunnerKey[e])
    }, t.getCurrentID = function () {
        return isNaN(t.$currentID) ? NaN : t.$currentID
    }, t.getCurrentRepeats = function () {
        return isNaN(t.$currentRepeats) ? NaN : t.$currentRepeats
    }, Object.defineProperty(t, "delayCallerList", {
        get: function () {
            var e = t.objKeyFromCallerHash.getKeyListCopy();
            return e ? 0 == e.length ? null : e : null
        }, enumerable: !0, configurable: !0
    }), Object.defineProperty(t, "callerIDList", {
        get: function () {
            var e = new Array;
            if (t.idFromRunnerKey) for (var r in t.idFromRunnerKey) e.push(t.idFromRunnerKey[r]);
            return 0 == e.length ? null : e
        }, enumerable: !0, configurable: !0
    }), t
}();
FrameDelayCaller.runnerFromID = new Object, FrameDelayCaller.idFromRunnerKey = new Object, FrameDelayCaller.currentFramesFromID = new Object, FrameDelayCaller.intervalFramesFromID = new Object, FrameDelayCaller.functionFromID = new Object, FrameDelayCaller.paramsFromID = new Object, FrameDelayCaller.currentRepeatsFromID = new Object, FrameDelayCaller.totalRepeatsFromID = new Object, FrameDelayCaller.idArrFromObjKey = new Object, FrameDelayCaller.isPauseFromID = new Object, FrameDelayCaller.objKeyFromID = new Object, FrameDelayCaller.$useAbleID = 0, FrameDelayCaller.runnerKeyFromRunnerHash = new HashMap, FrameDelayCaller.$objID = 0, FrameDelayCaller.objKeyFromCallerHash = new HashMap, __reflect(FrameDelayCaller.prototype, "FrameDelayCaller");
var GetNumChildrenTotal = function () {
    function t() {
    }

    return t.getTotalAt = function (e) {
        return t.count = 0, t.getNumChildrenTotal(e), t.count
    }, t.getListAt = function (e) {
        t.lastDisplayObjectArray = t.currentDisplayObjectArray, t.currentDisplayObjectArray = new Array, t.getNumChildrenList(e), t.addedDisplayObjectArray = new Array, t.removedDisplayObjectArray = new Array;
        for (var r in t.currentDisplayObjectArray) -1 == t.lastDisplayObjectArray.indexOf(t.currentDisplayObjectArray[r]) && t.addedDisplayObjectArray.push(t.currentDisplayObjectArray[r]);
        for (r in t.lastDisplayObjectArray) -1 == t.currentDisplayObjectArray.indexOf(t.lastDisplayObjectArray[r]) && t.removedDisplayObjectArray.push(t.lastDisplayObjectArray[r]);
        var i = [t.currentDisplayObjectArray, t.addedDisplayObjectArray, t.removedDisplayObjectArray];
        return i
    }, t.getNumChildrenTotal = function (e) {
        t.count += e.numChildren;
        for (var r = 0; r < e.numChildren; r++) egret.is(e.getChildAt(r), "egret.DisplayObjectContainer") && t.getNumChildrenTotal.call(t, e.getChildAt(r))
    }, t.getNumChildrenList = function (e) {
        for (var r = 0; r < e.numChildren; r++) t.currentDisplayObjectArray.push(e.getChildAt(r)), egret.is(e.getChildAt(r), "egret.DisplayObjectContainer") && t.getNumChildrenList.call(t, e.getChildAt(r))
    }, t
}();
GetNumChildrenTotal.currentDisplayObjectArray = new Array, __reflect(GetNumChildrenTotal.prototype, "GetNumChildrenTotal");
var SoundNames = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t
}();
SoundNames.BG_GAME = "backgroundGameMusic", SoundNames.SECONDS = "effectOfSeconds", SoundNames.PLAYING = "effectOfPlaying", SoundNames.WIN = "effectOfWin", SoundNames.ANGRY = "effectOfAngry", SoundNames.DAGGER = "effectOfDagger", __reflect(SoundNames.prototype, "SoundNames");
var TimerDelayCaller = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t.addCallerOnce = function (e, r, i, n) {
        for (var a = [], o = 4; o < arguments.length; o++) a[o - 4] = arguments[o];
        return t.addCallerRepeat.apply(t, [e, r, i, n, 1].concat(a))
    }, t.addCallerRepeat = function (e, r, i, n, a) {
        void 0 === a && (a = 0);
        for (var o = [], s = 5; s < arguments.length; s++) o[s - 5] = arguments[s];
        if (0 > a) throw new Error("参数 repeatCount 不能小于0");
        t.$useAbleID++;
        var l = new egret.Timer(n);
        if (l.addEventListener(egret.TimerEvent.TIMER, t.timerHandler, t), !t.idVectorFromDelayCallerHash.getObject(e)) {
            var c = new Array;
            t.idVectorFromDelayCallerHash.editPair(e, c)
        }
        return t.idVectorFromDelayCallerHash.getObject(e).push(t.$useAbleID), t.idFromTimerHash.editPair(l, t.$useAbleID), t.delayCallerFromID[t.$useAbleID] = e, t.totalRunTimesFromID[t.$useAbleID] = a, t.currentRunTimesFromID[t.$useAbleID] = 0, t.timerFromID[t.$useAbleID] = l, t.functionFromID[t.$useAbleID] = r.bind(i), t.paramsFromID[t.$useAbleID] = o, t.defaultDelayFromID[t.$useAbleID] = n, ActivateRunTimes.isStartUsing ? t.startTimeFromID[t.$useAbleID] = ActivateRunTimes.activateTimes : t.startTimeFromID[t.$useAbleID] = egret.getTimer(), t.passTimeFromID[t.$useAbleID] = 0, l.start(), t.$useAbleID
    }, t.timerHandler = function (e) {
        var r, i = e.currentTarget, n = t.idFromTimerHash.getObject(i), a = t.functionFromID[n], o = t.paramsFromID[n];
        if (t.currentRunTimesFromID[n]++, t.currentRunTimesFromID[n] >= t.totalRunTimesFromID[n] && 0 != t.totalRunTimesFromID[n]) {
            if (t.delayCallerFromID[n]) {
                r = t.delayCallerFromID[n];
                var s = t.idVectorFromDelayCallerHash.getObject(r), l = s.indexOf(n);
                s.splice(l, 1), 0 == s.length && t.idVectorFromDelayCallerHash.deletePair(r)
            }
            t.idFromTimerHash.deletePair(i), delete t.delayCallerFromID[n], delete t.timerFromID[n], delete t.currentRunTimesFromID[n], delete t.totalRunTimesFromID[n], delete t.functionFromID[n], delete t.paramsFromID[n], delete t.startTimeFromID[n], delete t.passTimeFromID[n], delete t.defaultDelayFromID[n], i.removeEventListener(egret.TimerEvent.TIMER, t.timerHandler, t), i.stop()
        } else i.delay != t.defaultDelayFromID[n] && (i.stop(), i.delay = t.defaultDelayFromID[n], i.start());
        a.apply(null, o)
    }, t.clearCallerByID = function (e) {
        if (t.timerFromID[e]) {
            var r = t.timerFromID[e];
            if (t.delayCallerFromID[e]) {
                var i = t.delayCallerFromID[e], n = t.idVectorFromDelayCallerHash.getObject(i);
                if (n) {
                    var a = n.indexOf(e);
                    n.splice(a, 1), t.idVectorFromDelayCallerHash.editPair(i, n), 0 == n.length && t.idVectorFromDelayCallerHash.deletePair(i)
                }
            }
            t.idFromTimerHash.deletePair(r), delete t.delayCallerFromID[e], delete t.timerFromID[e], delete t.currentRunTimesFromID[e], delete t.totalRunTimesFromID[e], delete t.functionFromID[e], delete t.paramsFromID[e], delete t.startTimeFromID[e], delete t.passTimeFromID[e], delete t.defaultDelayFromID[e], r.removeEventListener(egret.TimerEvent.TIMER, t.timerHandler, t), r.stop()
        }
    }, t.pauseCallerByID = function (e) {
        if (t.timerFromID[e]) {
            var r = t.timerFromID[e];
            r.running && (ActivateRunTimes.isStartUsing ? t.passTimeFromID[e] = ActivateRunTimes.activateTimes - t.startTimeFromID[e] : trace("ActivateRunTimes.start() 未被启用，无法计算中继时间"), r.stop())
        }
    }, t.resumeCallerByID = function (e, r) {
        if (void 0 === r && (r = !0), t.timerFromID[e]) {
            var i = t.timerFromID[e];
            i.running || (r && (ActivateRunTimes.isStartUsing ? i.delay > t.passTimeFromID[e] ? i.delay -= t.passTimeFromID[e] : i.delay = 0 : trace("ActivateRunTimes.start() 未被启用，无法计算中继时间")), t.startTimeFromID[e] = ActivateRunTimes.activateTimes, i.start())
        }
    }, t.clearCallerAt = function (e) {
        if (t.idVectorFromDelayCallerHash.getObject(e)) {
            var r = t.idVectorFromDelayCallerHash.getObject(e).concat();
            for (var i in r) t.clearCallerByID(r[i])
        }
    }, t.pauseCallerAt = function (e) {
        if (t.idVectorFromDelayCallerHash.getObject(e)) {
            var r = t.idVectorFromDelayCallerHash.getObject(e);
            for (var i in r) t.pauseCallerByID(r[i])
        }
    }, t.resumeCallerAt = function (e, r) {
        if (void 0 === r && (r = !0), t.idVectorFromDelayCallerHash.getObject(e)) {
            var i = t.idVectorFromDelayCallerHash.getObject(e);
            for (var n in i) t.resumeCallerByID(i[n], r)
        }
    }, t.clearAllCallers = function () {
        var e = t.idFromTimerHash.getObjectListCopy();
        for (var r in e) t.clearCallerByID(e[r]);
        t.$useAbleID = 0
    }, t.pauseAllCallers = function () {
        var e = t.idFromTimerHash.getObjectListCopy();
        for (var r in e) t.pauseCallerByID(e[r])
    }, t.resumeAllCallers = function (e) {
        void 0 === e && (e = !0);
        var r = t.idFromTimerHash.getObjectListCopy();
        for (var i in r) t.resumeCallerByID(r[i], e)
    }, t.hasDelayCaller = function (e) {
        for (var r in t.delayCallerFromID) if (t.delayCallerFromID[r] == e) return !0;
        return !1
    }, Object.defineProperty(t, "delayCallerList", {
        get: function () {
            var e = new Array;
            for (var r in t.delayCallerFromID) e.push(t.delayCallerFromID[r]);
            return 0 == e.length ? null : e
        }, enumerable: !0, configurable: !0
    }), Object.defineProperty(t, "callerIDList", {
        get: function () {
            var e = t.idFromTimerHash.getObjectListCopy();
            return 0 == e.length ? null : e
        }, enumerable: !0, configurable: !0
    }), t
}();
TimerDelayCaller.idVectorFromDelayCallerHash = new HashMap, TimerDelayCaller.idFromTimerHash = new HashMap, TimerDelayCaller.delayCallerFromID = new Object, TimerDelayCaller.timerFromID = new Object, TimerDelayCaller.functionFromID = new Object, TimerDelayCaller.totalRunTimesFromID = new Object, TimerDelayCaller.currentRunTimesFromID = new Object, TimerDelayCaller.paramsFromID = new Object, TimerDelayCaller.startTimeFromID = new Object, TimerDelayCaller.passTimeFromID = new Object, TimerDelayCaller.defaultDelayFromID = new Object, TimerDelayCaller.$useAbleID = 0, __reflect(TimerDelayCaller.prototype, "TimerDelayCaller");
var connect;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
        }

        return Object.defineProperty(t, "CONNECT_COMPLETE", {
            get: function () {
                return "connect complete"
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(t, "CONNECT_FAULT", {
            get: function () {
                return "connect fault"
            }, enumerable: !0, configurable: !0
        }), t.connectToURL = function (t, e, r, i) {
            void 0 === i && (i = egret.URLRequestMethod.GET);
            var n = new egret.URLRequest(t), a = new egret.URLLoader;
            n.method = i, this.loaderArray.push(a), this.methodArray.push(e.bind(r)), a.addEventListener(egret.Event.COMPLETE, this.onComplete, this), a.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), editHashPair(a, n), a.load(n)
        }, t.onError = function (t) {
            var e = t.target, r = this.loaderArray.indexOf(e), i = this.methodArray[r];
            e.removeEventListener(egret.Event.COMPLETE, this.onComplete, this), e.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), trace("链接服务器失败，准备再次尝试.."), trace("InitConfig.isRelease =", InitConfig.isRelease), i.length < 1 ? i.call(null) : i.call(null, this.CONNECT_FAULT)
        }, t.onComplete = function (t) {
            var e = t.target, r = this.loaderArray.indexOf(e), i = this.methodArray[r];
            e.removeEventListener(egret.Event.COMPLETE, this.onComplete, this), e.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), deleteHashPair(e), this.reconnectTimes = 0, i.length < 1 ? i.call(null) : i.call(null, t.target.data), e.removeEventListener(egret.Event.COMPLETE, this.onComplete, this), e.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), this.loaderArray.splice(r, 1), this.methodArray.splice(r, 1)
        }, t
    }();
    e.methodArray = new Array, e.loaderArray = new Array, e.reconnectTimes = 0, t.NetworkConnector = e, __reflect(e.prototype, "connect.NetworkConnector")
}(connect || (connect = {}));
var connect;
!function (t) {
    var e = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
        }

        return Object.defineProperty(t, "CONNECT_COMPLETE", {
            get: function () {
                return "connect complete"
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(t, "CONNECT_FAULT", {
            get: function () {
                return "connect fault"
            }, enumerable: !0, configurable: !0
        }), t.connectToURL = function (t, e, r, i) {
            void 0 === i && (i = egret.URLRequestMethod.GET);
            var n = new egret.URLRequest(t), a = new egret.URLLoader;
            n.method = i, a._request = n, this.loaderArray.push(a), this.methodArray.push(e.bind(r)), JsonpReq.process(a), a.addEventListener(egret.Event.COMPLETE, this.onComplete, this), a.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this)
        }, t.onError = function (t) {
            var e = t.target, r = this.loaderArray.indexOf(e), i = this.methodArray[r];
            return e.removeEventListener(egret.Event.COMPLETE, this.onComplete, this), e.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), this.reconnectTimes < 10 ? (trace("链接服务器失败，准备再次尝试.."), i.length < 1 ? i.call(null) : i.call(null, this.CONNECT_FAULT), this.reconnectTimes++, void setTimeout(e.load, 500, e._request)) : void trace("多次访问服务器失败，请检查网络链接并手动刷新页面")
        }, t.onComplete = function (t) {
            var e = t.target, r = this.loaderArray.indexOf(e), i = this.methodArray[r];
            e.removeEventListener(egret.Event.COMPLETE, this.onComplete, this), e.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), this.reconnectTimes = 0, i.length < 1 ? i.call(null) : i.call(null, t.target.data), e.removeEventListener(egret.Event.COMPLETE, this.onComplete, this), e.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this), this.loaderArray.splice(r, 1), this.methodArray.splice(r, 1)
        }, t
    }();
    e.methodArray = new Array, e.loaderArray = new Array, e.reconnectTimes = 0, t.NetworkJSONPRequester = e, __reflect(e.prototype, "connect.NetworkJSONPRequester")
}(connect || (connect = {}));
var JsonpReq = function () {
    function t() {
    }

    return t.process = function (e) {
        t.completeCall["call_" + t._regID] = function (r) {
            var i = t._regID;
            e.data = r, e.dispatchEvent(new egret.Event(egret.Event.COMPLETE)), delete t.completeCall["call_" + i]
        }, t.startLoader(e, t._regID++)
    }, t.startLoader = function (t, e) {
        var r = document.createElement("script");
        r.src = t._request.url, document.body.appendChild(r)
    }, t
}();
JsonpReq._regID = 0, JsonpReq.completeCall = {},
    __reflect(JsonpReq.prototype, "JsonpReq");
var InitConfig = function () {
    function t() {
    }

    return t
}();
InitConfig.res_path = "", InitConfig.req_host = "", InitConfig.isShowVersion = !0, InitConfig.isRelease = !1, __reflect(InitConfig.prototype, "InitConfig");
var disDev;
!function (t) {
    var e = function (t) {
        function e(e, r, i, n) {
            void 0 === e && (e = null), void 0 === r && (r = 1), void 0 === i && (i = !0), void 0 === n && (n = disTypes.BitmapAlignEnum[0]);
            var a = t.call(this) || this;
            return a.backGroundBitmap = new egret.Bitmap, a.$isNatureEnter = !1, a.$bitmapAlignType = disTypes.BitmapAlignEnum[0], e && a.reconstruct(e, r, i, n), a
        }

        return __extends(e, t), e.prototype.reconstruct = function (t, e, r, i) {
            if (void 0 === e && (e = 1), void 0 === r && (r = !0), void 0 === i && (i = disTypes.BitmapAlignEnum[0]), !t || t.length < 1) throw new Error("textureInfoList不能为空, 并且长度不能小于1");
            this.$totalFrames = 0, this.$partArray = new Array, this.$partHeadList = new Array, this.$partTailList = new Array, this.correctedPointArray = new Array, this.$textureNameList = new Array;
            for (var n = 0; n < t.length; n++) {
                var a = [this.$totalFrames + 1];
                this.$totalFrames += t[n].nameArray.length, a.push(this.$totalFrames), this.$partArray.push(a), this.$partHeadList.push(a[0] - 1), this.$partTailList.push(a[1] - 1), this.correctedPointArray.push(t[n].correctedPoint), this.$textureNameList = this.$textureNameList.concat(t[n].nameArray)
            }
            if (1 > e || e > this.$totalFrames) throw new Error("初始帧start超出有效范围");
            var o = this.checkAndCreateTexture(this.$textureNameList[e - 1]);
            this.$isPlaying = !1, this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.clearLoopPoint(), this.textureInfoList = t, this.start = Math.floor(e), this.$currentFrame = this.start, this.addChildAt(this.backGroundBitmap, 0), this.backGroundBitmap.texture = o, this.$initHeight = this.backGroundBitmap.height, this.$initWidth = this.backGroundBitmap.width, this.bitmapAlignType = i, this.setDriver(), r && this.play(), this.callBackFunctionCollection = new Array
        }, e.prototype.checkAndCreateTexture = function (t) {
            var e = RES.getRes(t);
            return this.$currentTextureName != t ? (this.$currentTextureName = t, t && (e || trace("无法获取有效的 Texture: " + t + "，请检查名称拼写，或确认是否已经正常加载该资源")), e) : (this.$currentTextureName = t, e)
        }, e.prototype.push = function (t) {
            var e = [this.$totalFrames + 1];
            return this.$totalFrames += t.nameArray.length, e.push(this.$totalFrames), this.$partArray.push(e), this.$partHeadList.push(e[0] - 1), this.correctedPointArray.push(t.correctedPoint), this.$textureNameList = this.$textureNameList.concat(t.nameArray), this
        }, e.prototype.concat = function (t) {
            for (var e = 0; e < t.length; e++) {
                var r = t[e], i = [this.$totalFrames + 1];
                this.$totalFrames += r.nameArray.length, i.push(this.$totalFrames), this.$partArray.push(i), this.$partHeadList.push(i[0] - 1), this.correctedPointArray.push(r.correctedPoint), this.$textureNameList = this.$textureNameList.concat(r.nameArray)
            }
            return this
        }, e.prototype.addFrameScript = function (t, e, r, i) {
            if (void 0 === r && (r = this), void 0 === i && (i = !0), isNaN(Math.floor(t)) || Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection[Math.floor(t)] = e.bind(r), i && Math.floor(t) == this.start && this.executeFrameScript && this.callBackFunctionCollection[Math.floor(t)].call(null)
        }, e.prototype.addFrameScriptOnce = function (t, e, r, i) {
            if (void 0 === r && (r = this), void 0 === i && (i = !0), isNaN(Math.floor(t)) || Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection[Math.floor(t)] = function () {
                e.bind(r).call(null), this.removeFrameScript(Math.floor(t))
            }.bind(this), i && Math.floor(t) == this.start && this.executeFrameScript && this.callBackFunctionCollection[Math.floor(t)].call(null)
        }, e.prototype.removeFrameScript = function (t) {
            if (Math.floor(t) < 0 || Math.floor(t) > this.$totalFrames - 1) throw new Error("事件帧序号超出有效范围");
            this.callBackFunctionCollection && this.callBackFunctionCollection[Math.floor(t)] && delete this.callBackFunctionCollection[Math.floor(t)]
        }, e.prototype.play = function () {
            return 1 == this.$totalFrames ? void this.stop() : (this.$isPlaying = !0, void(this.$driverType == disTypes.DriverType.FRAME ? (this.addEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop())) : this.$driverType == disTypes.DriverType.TIMER && (this.timer || (this.timer = new egret.Timer(this.playInterval)), this.timer.addEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.delay = this.playInterval, this.timer.start())))
        }, e.prototype.gotoAndPlay = function (t) {
            if (1 == this.$totalFrames) return void this.stop();
            this.$isNatureEnter = !1;
            var e = this.$currentFrame;
            this.$currentFrame = Math.floor(t), this.$currentFrame < 1 ? this.$currentFrame = 1 : this.$currentFrame > this.$totalFrames && (this.$currentFrame = this.$totalFrames), this.start = this.$currentFrame;
            var r = this.checkAndCreateTexture(this.$textureNameList[this.start - 1]);
            this.backGroundBitmap.texture = r, this.bitmapAlignHandler(), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null), this.play()
        }, e.prototype.stop = function () {
            this.$isPlaying = !1, this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.start = this.$currentFrame;
            var t = this.checkAndCreateTexture(this.$textureNameList[this.start - 1]);
            this.backGroundBitmap.texture = t, this.bitmapAlignHandler()
        }, e.prototype.gotoAndStop = function (t) {
            if (1 == this.$totalFrames) return void this.stop();
            this.$isNatureEnter = !1;
            var e = this.$currentFrame;
            this.$currentFrame = Math.floor(t), this.$currentFrame < 1 ? this.$currentFrame = 1 : this.$currentFrame > this.$totalFrames && (this.$currentFrame = this.$totalFrames), this.stop(), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.playHandler = function () {
            if (this.$isPlaying && this.executeDriverType) if (this.$driverType == disTypes.DriverType.FRAME) {
                for (this.currentInterval++; this.currentInterval >= 2 * this.playInterval;) if (this.currentInterval -= this.playInterval, this.autoNextFrame(!1), !this.$isPlaying) return;
                this.currentInterval >= this.playInterval && (this.currentInterval -= this.playInterval, this.autoNextFrame(!0))
            } else this.$driverType == disTypes.DriverType.TIMER && this.autoNextFrame()
        }, e.prototype.autoNextFrame = function (t) {
            void 0 === t && (t = !0), this.$isNatureEnter = !0, this.start <= this.$totalFrames && this.start++, this.start > this.$totalFrames && (this.isPlaying ? this.start = 1 : this.start = this.$totalFrames), this.executeLoop && this.isPlaying && this.$currentFrame == this.$loopEndFrame && (this.start = this.$loopStartFrame), this.executeLoop && this.isPlaying && this.$currentFrame >= this.$loopStartFrame && this.$currentFrame <= this.$loopEndFrame && (this.driverType != this.$driverTypeOnLooping || this.$playIntervalOnLooping != this.playInterval) && this.setDriver(this.$driverTypeOnLooping, this.$playIntervalOnLooping);
            var e = this.$currentFrame;
            if (this.$currentFrame = this.start, t) {
                var r = this.checkAndCreateTexture(this.$textureNameList[this.$currentFrame - 1]);
                this.backGroundBitmap.texture = r, this.bitmapAlignHandler()
            }
            this.executeLoop && this.isPlaying && this.start == this.$loopStartFrame && this.start == this.$loopEndFrame && (trace("提示: 循环点的起始帧号与结束帧号相同, 自动停止播放"), this.stop()), this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && e != this.$currentFrame && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.autoPrevFrame = function (t) {
            if (void 0 === t && (t = !0), this.start > 1 && (this.start--, this.$isNatureEnter = !0), this.start < 1 && (this.start = 1), this.$currentFrame = this.start, t) {
                var e = this.checkAndCreateTexture(this.$textureNameList[this.start - 1]);
                this.backGroundBitmap.texture = e, this.bitmapAlignHandler()
            }
            this.callBackFunctionCollection && this.executeFrameScript && this.callBackFunctionCollection[this.$currentFrame - 1] && this.callBackFunctionCollection[this.$currentFrame - 1].call(null)
        }, e.prototype.nextFrame = function () {
            this.stop(), this.start < this.$totalFrames && this.autoNextFrame()
        }, e.prototype.prevFrame = function () {
            this.stop(), this.start > 1 && this.autoPrevFrame()
        }, Object.defineProperty(e.prototype, "currentTextureName", {
            get: function () {
                return this.$currentTextureName
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "isNatureEnter", {
            get: function () {
                return this.$isNatureEnter
            }, enumerable: !0, configurable: !0
        }), e.prototype.getPartHeadAt = function (t) {
            return t = Math.floor(t), t >= this.$partHeadList.length || t < -this.$partHeadList.length ? (trace("提示: 提供给 getPartHeadAt 的索引值超出片段头列表范围"), NaN) : (0 > t && (t = this.$partHeadList.length + t), this.$partHeadList[t])
        }, e.prototype.getPartTailAt = function (t) {
            return t = Math.floor(t), t >= this.$partTailList.length || t < -this.$partTailList.length ? (trace("提示: 提供给 getPartTailAt 的索引值超出片段尾列表范围"), NaN) : (0 > t && (t = this.$partTailList.length + t), this.$partTailList[t])
        }, e.prototype.getPartHeadAndTailList = function () {
            for (var t = new Array, e = 0; e < this.$partArray.length; e++) t.push(new n(this.$partArray[e][0] - 1, this.$partArray[e][1] - 1));
            return t
        }, e.prototype.getPartHeadAndTailAt = function (t) {
            return t = Math.floor(t), t >= this.$partArray.length || t < -this.$partArray.length ? (trace("提示: 提供给 getPartHeadAt 的索引值超出片段头列表范围"), null) : (0 > t && (t = this.$partArray.length + t), new n(this.$partHeadList[t], this.$partTailList[t]))
        }, e.prototype.getPlayPartIndexByFrame = function (t) {
            if (1 > t || t > this.totalFrames) throw new Error("帧号超出有效范围！");
            t = Math.floor(t);
            for (var e = 0; e < this.$partArray.length; e++) if (t >= this.$partArray[e][0] && t <= this.$partArray[e][1]) return e
        }, Object.defineProperty(e.prototype, "bitmapAlignType", {
            get: function () {
                return this.$bitmapAlignType
            }, set: function (t) {
                this.$bitmapAlignType = t, this.bitmapAlignHandler()
            }, enumerable: !0, configurable: !0
        }), e.prototype.bitmapAlignHandler = function () {
            switch (this.$bitmapAlignType) {
                case disTypes.BitmapAlignEnum[0]:
                    this.backGroundBitmap.x = 0, this.backGroundBitmap.y = 0;
                    break;
                case disTypes.BitmapAlignEnum[1]:
                    this.backGroundBitmap.x = (this.$initWidth - this.backGroundBitmap.width) / 2, this.backGroundBitmap.y = 0;
                    break;
                case disTypes.BitmapAlignEnum[2]:
                    this.backGroundBitmap.x = this.$initWidth - this.backGroundBitmap.width, this.backGroundBitmap.y = 0;
                    break;
                case disTypes.BitmapAlignEnum[3]:
                    this.backGroundBitmap.x = 0, this.backGroundBitmap.y = (this.$initHeight - this.backGroundBitmap.height) / 2;
                    break;
                case disTypes.BitmapAlignEnum[4]:
                    this.backGroundBitmap.x = (this.$initWidth - this.backGroundBitmap.width) / 2, this.backGroundBitmap.y = (this.$initHeight - this.backGroundBitmap.height) / 2;
                    break;
                case disTypes.BitmapAlignEnum[5]:
                    this.backGroundBitmap.x = this.$initWidth - this.backGroundBitmap.width, this.backGroundBitmap.y = (this.$initHeight - this.backGroundBitmap.height) / 2;
                    break;
                case disTypes.BitmapAlignEnum[6]:
                    this.backGroundBitmap.x = 0, this.backGroundBitmap.y = this.$initHeight - this.backGroundBitmap.height;
                    break;
                case disTypes.BitmapAlignEnum[7]:
                    this.backGroundBitmap.x = (this.$initWidth - this.backGroundBitmap.width) / 2, this.backGroundBitmap.y = this.$initHeight - this.backGroundBitmap.height;
                    break;
                case disTypes.BitmapAlignEnum[8]:
                    this.backGroundBitmap.x = this.$initWidth - this.backGroundBitmap.width, this.backGroundBitmap.y = this.$initHeight - this.backGroundBitmap.height
            }
            var t;
            for (t = 0; t < this.$partArray.length && !(this.$currentFrame >= this.$partArray[t][0] && this.$currentFrame <= this.$partArray[t][1]); t++) ;
            var e = this.correctedPointArray[t];
            this.backGroundBitmap.x += e.x, this.backGroundBitmap.y += e.y
        }, e.prototype.destroy = function () {
            t.prototype.destroy.call(this), this.backGroundBitmap && this.backGroundBitmap.parent && this.backGroundBitmap.parent.removeChild(this.backGroundBitmap), this.callBackFunctionCollection = null
        }, e.prototype.setDriver = function (t, e) {
            if (void 0 === t && (t = disTypes.DriverType.FRAME), void 0 === e && (e = 1), 0 >= e) throw new Error("驱动间隔不能等于或小于0！");
            this.executeDriverType && (this.$driverType = t, this.playInterval = e, this.$driverTypeOnLooping = this.$driverType, this.$playIntervalOnLooping = this.playInterval, this.currentInterval = 0, t == disTypes.DriverType.FRAME && this.playInterval % 1 != 0 ? trace("提示: 当前采用逐帧驱动方式, playInterval不是整数(" + this.playInterval + "), 将会出现丢帧的情况") : t == disTypes.DriverType.TIMER && this.playInterval < 16 && trace("提示: 当前采用计时器驱动方式, playInterval低于下限16毫秒(" + this.playInterval + "), 将自动调整为 帧/16毫秒 的频率"), this.isPlaying && (this.removeEventListener(egret.Event.ENTER_FRAME, this.playHandler, this), this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.playHandler, this), this.timer.stop()), this.play()))
        }, Object.defineProperty(e.prototype, "frameInterval", {
            set: function (t) {
                this.setDriver(disTypes.DriverType.FRAME, t)
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "timerInterval", {
            set: function (t) {
                this.setDriver(disTypes.DriverType.TIMER, t)
            }, enumerable: !0, configurable: !0
        }), Object.defineProperty(e.prototype, "driverType", {
            get: function () {
                return this.$driverType
            }, enumerable: !0, configurable: !0
        }), e
    }(t.AbstractAnimation);
    t.AnimationGroup = e, __reflect(e.prototype, "disDev.AnimationGroup");
    var r = function () {
        function t() {
            throw new Error(this.__class__ + " 是静态成员集成类, 无需实例化")
        }

        return t.createInfo = function (t, e, r, n, a, o) {
            if (void 0 === e && (e = null), void 0 === r && (r = 0), void 0 === n && (n = 1), void 0 === a && (a = 0), void 0 === o && (o = 0), 1 > t) throw new Error("Texture对象列表长度不能小于1");
            if (1 > n) throw new Error("Texture对象的序号长度不能小于1");
            var s = t + r, l = new Array;
            n = Math.floor(n);
            for (var c = Math.floor(r); c < Math.floor(s); c++) null == e ? l.push(null) : l.push(e + this.getFrameByDigits(c, n));
            var h = new i(l, new egret.Point(a, o));
            return h
        }, t.createStaticInfo = function (t, e, r, n) {
            if (void 0 === e && (e = null), void 0 === r && (r = 0), void 0 === n && (n = 0), 1 > t) throw new Error("Texture对象列表长度不能小于1");
            for (var a = new Array, o = 0; t > o; o++) null == e ? a.push(null) : a.push(e);
            var s = new i(a, new egret.Point(r, n));
            return s
        }, t.getFrameByDigits = function (t, e) {
            1 > e && (e = 1), e = Math.floor(e);
            for (var r = t.toString(); r.length < e;) r = 0 + r;
            return r
        }, t
    }();
    t.TextureInfoMaker = r, __reflect(r.prototype, "disDev.TextureInfoMaker");
    var i = function () {
        function e(t, e) {
            void 0 === e && (e = new egret.Point(0, 0)), this.nameArray = t, this.correctedPoint = e
        }

        return e.prototype.reverse = function (e) {
            void 0 === e && (e = this.correctedPoint.clone());
            var r = this.nameArray.concat().reverse();
            return new t.TextureInfo(r, e)
        }, e
    }();
    t.TextureInfo = i, __reflect(i.prototype, "disDev.TextureInfo");
    var n = function () {
        function t(t, e) {
            this.head = t, this.tail = e
        }

        return t
    }();
    t.HeadAndTail = n, __reflect(n.prototype, "disDev.HeadAndTail")
}(disDev || (disDev = {}));
var bones;
!function (t) {
    var e = function () {
        function t() {
            var t = RES.getRes("DaZuiNiao"), e = RES.getRes("DaZuiNiao_texture_json"),
                r = RES.getRes("DaZuiNiao_texture_png"), i = new dragonBones.EgretFactory;
            i.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(t)), i.addTextureAtlas(new dragonBones.EgretTextureAtlas(r, e)), this.armature = i.buildArmature("Armature");
            var n = this.armature;
            dragonBones.WorldClock.clock.add(n)
        }

        return t
    }();
    t.DragonBonesBird = e, __reflect(e.prototype, "bones.DragonBonesBird")
}(bones || (bones = {}));
var bones;
!function (t) {
    var e = function () {
        function t() {
            var t = RES.getRes("FatGuy"), e = RES.getRes("FatGuy_texture_json"), r = RES.getRes("FatGuy_texture_png"),
                i = new dragonBones.EgretFactory;
            i.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(t)), i.addTextureAtlas(new dragonBones.EgretTextureAtlas(r, e)), this.armature = i.buildFastArmature("Armature");
            var n = this.armature;
            dragonBones.WorldClock.clock.add(n)
        }

        return t
    }();
    t.DragonBonesFatGuy = e, __reflect(e.prototype, "bones.DragonBonesFatGuy")
}(bones || (bones = {}));
var bones;
!function (t) {
    var e = function () {
        function t() {
            var t = RES.getRes("King"), e = RES.getRes("King_texture_json"), r = RES.getRes("King_texture_png"),
                i = new dragonBones.EgretFactory;
            i.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(t)), i.addTextureAtlas(new dragonBones.EgretTextureAtlas(r, e)), this.armature = i.buildArmature("Armature");
            var n = this.armature;
            dragonBones.WorldClock.clock.add(n)
        }

        return t
    }();
    t.DragonBonesKing = e, __reflect(e.prototype, "bones.DragonBonesKing")
}(bones || (bones = {}));
var game;
!function (t) {
    var e = function () {
        function t() {
        }
        /*var apiurl = '';
        apiurl="http://api.dk138.vip/event/present_expect?gamekey=cqssc&tk=u1211u.bG9naW5faXA9MTkyLjE2OC4yMDAuMTgwJmJlZ2ludGltZT0xNTMxMzc5MjU0JmVuZHRpbWU9MTUzMzkxNjgwMA.63b6dcf7a66cf465bb353d47808f1618";*/
        return t.getData = function () {
            var e = InitConfig.req_host;
            e = connect.NetworkConnector.connectToURL(e + apiurl, t.onGetData, t)
            /*"" == e ? InitConfig.isRelease ? connect.NetworkConnector.connectToURL("//" + document.domain + "/icpapi/GetMShiPinInfo?lotteryid=2", t.onGetData, t) : connect.NetworkConnector.connectToURL("localData.json", t.onGetData, t) : connect.NetworkConnector.connectToURL(e + "/icpapi/GetMShiPinInfo?lotteryid=2", t.onGetData, t)*/
        },/* t.getRecord = function () {
            var e = InitConfig.req_host;
            "" == e ? InitConfig.isRelease ? connect.NetworkConnector.connectToURL("http://" + document.domain + "/shishicai/ajax?ajaxHandler=GetNewestRecord&t=" + Math.random(), t.onGetRecord, t) : connect.NetworkConnector.connectToURL("localRecord.json", t.onGetRecord, t) : connect.NetworkConnector.connectToURL(e + "shishicai/ajax?ajaxHandler=GetNewestRecord&t=" + Math.random(), t.onGetRecord, t)
        },*/ t.onGetData = function (e) {
            if (e == connect.NetworkConnector.CONNECT_FAULT) return void(t.dataRequestTimes < 10 ? (egret.setTimeout(t.getData, t, 500), t.dataRequestTimes++, trace("reconnect  " + t.dataRequestTimes)) : (ConcreteSubject.notify(SubjectTypes.LINK_FAULT), trace("多次访问服务器失败，请检查网络链接并手动刷新页面")));
            try {
                var r = JSON.parse(e)
            } catch (i) {
                return trace("JSON数据解析异常，重新请求数据!"), void t.getData()
            }

            t.dataRequestTimes = 0;
            var n = localData.Cache.data;
            n.time = r.present.opentime.toString();
            if(n.current.periodNumber==undefined||n.current.periodNumber==r.last_opencode.expect.toString()){
                CommonVariable.awardStatus = 0;
            }else {
                CommonVariable.awardStatus=2;
            }
            n.current.awardNumbers = r.last_opencode.opencode.toString(),//本期开奖号码
            n.current.periodNumber = r.last_opencode.expect.toString(), //本期期号
            n.current.awardTime = r.last_opencode.opentime.toString(),//本期开奖时间
            n.current.awardNumbers = r.last_opencode.opencode.toString(),//本期开奖号码
            n.next.periodNumber = r.present.expect.toString(),//下期期号
            n.next.awardTime = r.present.opentimestamp.toString(),//下期开奖时间
            n.next.awardTimeInterval = r.present.opentime_remaining.toString(),//开奖倒计时
            n.next.delayTimeInterval = r.present.opentime_remaining.toString(),//开奖倒计时
            localData.CommonVariable.resultArray = n.current.awardNumbers.split(","),//本期开奖号码
            CommonVariable.timeInterval = Math.round(Number(Cache.data.next.awardTimeInterval) / 1e3 + Number(Cache.data.next.delayTimeInterval)), ConcreteSubject.notify(SubjectTypes.GET_DATA)
        }, t.onGetRecord = function (e) {
            if (e == connect.NetworkConnector.CONNECT_FAULT) return void(t.recordRequestTimes < 10 ? (egret.setTimeout(t.getRecord, t, 500), t.recordRequestTimes++, trace("reconnect  " + t.recordRequestTimes)) : (ConcreteSubject.notify(SubjectTypes.LINK_FAULT), trace("多次访问服务器失败，请检查网络链接并手动刷新页面")));
            try {
                var r = JSON.parse(e)
            } catch (i) {
                return trace("JSON数据解析异常，重新请求数据!"), void t.getRecord()
            }
            t.recordRequestTimes = 0;
            var n = localData.Cache.record;
            n.total = r.total.toString(), n.period = r.period.toString(), n.totalOddorEven = r.totalOddorEven.toString(), n.totalBigOrSmall = r.totalBigOrSmall.toString(), n.longhu = r.longhu.toString(), n.qianSan = r.qianSan.toString(), n.zhongSan = r.zhongSan.toString(), n.houSan = r.houSan.toString(), ConcreteSubject.notify(SubjectTypes.GET_RECORD)
        }, t
    }();
    e.dataRequestTimes = 0, e.recordRequestTimes = 0, t.DataRequester = e, __reflect(e.prototype, "game.DataRequester")
}(game || (game = {}));
var game;
!function (t) {
    var e = function (t) {
        function e() {
            var e = t.call(this) || this;
            return e.spriteArray = new Array, e.addEventListener(egret.Event.ADDED_TO_STAGE, e.onAdded, e), e
        }

        return __extends(e, t), e.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, e.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, e.prototype.onAdded = function () {
            this.buildView(), this.addEvents()
        }, e.prototype.buildView = function () {
            var t = new egret.Bitmap;
            this.addChild(t), t.texture = RES.getRes("GameBG"), t.scaleX = t.scaleY = 1 / .7, this.board_mc = new egret.Sprite, this.numContainer = new egret.Sprite, this.numBGContainer = new egret.Sprite, this.recordContainer = new egret.Sprite, this.rollContainer = new egret.Sprite, this.spriteArray.push(this.board_mc, this.numContainer, this.numBGContainer, this.recordContainer, this.rollContainer);
            for (var e = 0; 5 > e; e++) for (var r = 0; 3 > r; r++) {
                var i = new disDev.AnimationLite(11, "LotteryNum", 1, 4, 1, (!1));
                i.name = "num_h" + e + "s" + r, editHashPair(i.name, i), i.x = 242 + 100 * e, i.y = 166 + 100 * r, i.scaleX = i.scaleY = 1 / .7;
                var n = new disDev.AnimationLite(9, "whMovie", 1, 4, 1, (!1));
                n.x = i.x, n.y = i.y, n.userData = i, i.userData = n, n.addFrameScript(8, function () {
                    this.visible = !1, this.gotoAndStop(1), this.userData.visible = !0
                }, n), this.numContainer.addChild(i), this.numContainer.addChild(n);
                var a = new egret.Bitmap;
                a.name = "numbg_h" + e + "s" + r, editHashPair(a.name, a), a.texture = RES.getRes("NumBG"), a.x = 242 + 100 * e, a.y = 166 + 100 * r, this.numBGContainer.addChild(a)
            }
            for (e = 0; 5 > e; e++) {
                var o = disDev.TextureInfoMaker.createInfo(2, "dx", 0, 3), s = new disDev.AnimationGroup([o], 1, (!1));
                s.name = "dx" + e, editHashPair(s.name, s), s.x = 242 + 100 * e, s.y = 166, this.recordContainer.addChild(s), o = disDev.TextureInfoMaker.createInfo(2, "ds", 0, 3), s = new disDev.AnimationGroup([o], 1, (!1)), s.name = "ds" + e, editHashPair(s.name, s), s.x = 242 + 100 * e, s.y = 366, this.recordContainer.addChild(s);
                var l = new disDev.AnimationLite(30, "NumRoll", 1, 4);
                l.name = "roll1_" + e, editHashPair(l.name, l), l.anchorOffsetX = 1, l.anchorOffsetY = 1, l.x = 242 + 100 * e, l.y = 166, l.scaleX = l.scaleY = 1 / .7, l.gotoAndStop(Math.ceil(30 * Math.random())), this.rollContainer.addChild(l);
                var c = new disDev.AnimationLite(30, "NumRoll", 1, 4);
                c.name = "roll2_" + e, editHashPair(c.name, c), c.anchorOffsetX = 1, c.anchorOffsetY = 1, c.x = 242 + 100 * e, c.y = 266, c.scaleX = c.scaleY = 1 / .7, c.gotoAndStop(Math.ceil(30 * Math.random())), this.rollContainer.addChild(c);
                var h = new disDev.AnimationLite(30, "NumRoll", 1, 4);
                h.name = "roll3_" + e, editHashPair(h.name, h), h.anchorOffsetX = 1, h.anchorOffsetY = 1, h.x = 242 + 100 * e, h.y = 366, h.scaleX = h.scaleY = 1 / .7, h.gotoAndStop(Math.ceil(30 * Math.random())), this.rollContainer.addChild(h)
            }
            var u = new disDev.AnimationGroup;
            this.fatguyContainer = new egret.Sprite, this.kingContainer = new egret.Sprite, this.birdContainer = new egret.Sprite, this.clockProxy = new mcProxy.ClockProxy(u), this.board_mc.addChild(this.numBGContainer), this.board_mc.addChild(this.numContainer), this.board_mc.addChild(this.recordContainer), this.board_mc.addChild(this.rollContainer), this.boardProxy = new mcProxy.BoardProxy(this.spriteArray), this.addChild(this.board_mc), this.addChild(this.kingContainer), this.addChild(this.fatguyContainer);
            for (var d in connect.DynamicLoader.gameAssets) {
                var m = connect.DynamicLoader.object[connect.DynamicLoader.gameAssets[d]];
                m && this.addChild(m)
            }
            this.addChild(u), this.addChild(this.birdContainer), this.fatguyProxy = new mcProxy.FatguyProxy(this.fatguyContainer), this.kingProxy = new mcProxy.KingProxy(this.kingContainer), this.birdProxy = new mcProxy.BirdProxy(this.birdContainer)
        }, e.prototype.addEvents = function () {
        }, e.prototype.init = function () {
            this.boardProxy.init()
        }, e.prototype.touchHandler = function (t) {
        }, e
    }(egret.DisplayObjectContainer);
    t.GameView = e, __reflect(e.prototype, "game.GameView", ["IObserver"])
}(game || (game = {}));
var game;
!function (t) {
    var e = function (t) {
        function e() {
            var e = t.call(this) || this;
            return e.he_txt = new egret.TextField, e.danshuang_txt = new egret.TextField, e.daxiao_txt = new egret.TextField, e.longhu_txt = new egret.TextField, e.qiansan_txt = new egret.TextField, e.zhongsan_txt = new egret.TextField, e.housan_txt = new egret.TextField, e.xiaqi_txt = new egret.TextField, e.shijian_txt = new egret.TextField, e.jinqi_txt = new egret.TextField, e.qishu_txt = new egret.TextField, e.moni_txt = new egret.TextField, e.bit0 = new egret.Bitmap, e.bit1 = new egret.Bitmap, e.bit2 = new egret.Bitmap, e.bit3 = new egret.Bitmap, e.bit4 = new egret.Bitmap, e.logo = new egret.Bitmap, e.buildView(), e.addEvents(), e
        }

        return __extends(e, t), e.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, e.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, e.prototype.buildView = function () {
            var t = [this.he_txt, this.danshuang_txt, this.daxiao_txt, this.longhu_txt, this.qiansan_txt, this.zhongsan_txt, this.housan_txt];
            for (var e in t) {
                var r = t[e];
                r.fontFamily = "Microsoft YaHei", r.bold = !0, r.size = 22, r.textColor = 7951141, r.textAlign = egret.HorizontalAlign.CENTER, r.y = 502, this.addChild(r)
            }
            r.y = 502, this.addChild(r), this.he_txt.x = 252, this.danshuang_txt.x = 302, this.daxiao_txt.x = 353, this.longhu_txt.x = 449, this.qiansan_txt.x = 555, this.zhongsan_txt.x = 621, this.housan_txt.x = 686, this.xiaqi_txt.width = 200, this.shijian_txt.width = 200, this.xiaqi_txt.x = -8, this.xiaqi_txt.y = 75, this.shijian_txt.x = -3, this.shijian_txt.y = 135, this.addChild(this.xiaqi_txt), this.addChild(this.shijian_txt), this.xiaqi_txt.fontFamily = "Microsoft YaHei", this.xiaqi_txt.bold = !0, this.xiaqi_txt.size = 24, this.xiaqi_txt.textColor = 7951141, this.xiaqi_txt.textAlign = egret.HorizontalAlign.CENTER, this.shijian_txt.fontFamily = "Microsoft YaHei", this.shijian_txt.bold = !0, this.shijian_txt.size = 25, this.shijian_txt.textColor = 7951141, this.shijian_txt.textAlign = egret.HorizontalAlign.CENTER, this.jinqi_txt.fontFamily = "Microsoft YaHei", this.jinqi_txt.bold = !0, this.jinqi_txt.size = 19, this.jinqi_txt.textColor = 15517599, this.jinqi_txt.textAlign = egret.HorizontalAlign.CENTER, this.jinqi_txt.x = 482, this.jinqi_txt.y = 543, this.qishu_txt.width = 250, this.qishu_txt.fontFamily = "Microsoft YaHei", this.qishu_txt.bold = !0, this.qishu_txt.size = 25, this.qishu_txt.textColor = 15517599, this.qishu_txt.textAlign = egret.HorizontalAlign.CENTER, this.qishu_txt.x = 447, this.qishu_txt.y = 534, this.moni_txt.fontFamily = "Microsoft YaHei", this.moni_txt.bold = !0, this.moni_txt.size = 19, this.moni_txt.textColor = 15517599, this.moni_txt.textAlign = egret.HorizontalAlign.CENTER, this.moni_txt.x = 532, this.moni_txt.y = 543, this.moni_txt.text = "模拟开奖", this.addChild(this.jinqi_txt), this.addChild(this.qishu_txt), this.addChild(this.moni_txt), this.addChild(this.bit0), this.addChild(this.bit1), this.addChild(this.bit2), this.addChild(this.bit3), this.addChild(this.bit4), this.moni_txt.visible = !1;
            for (var i = 0; 5 > i; i++) this["bit" + i].scaleX = this["bit" + i].scaleY = .8 / .7, this["bit" + i].x = 430 + 50 * i, this["bit" + i].y = 554;
            this.laba_open = new disDev.ButtonLite("laba000", "laba001"), this.laba_open.x = 753, this.laba_open.y = 528, this.laba_close = new disDev.ButtonLite("laba002", "laba003"), this.laba_close.x = 753, this.laba_close.y = 528, this.addChild(this.laba_close), this.laba_open.touchEnabled = !0, this.laba_close.touchEnabled = !0
        }, e.prototype.addEvents = function () {
            this.subscribe(SubjectTypes.GAME_START, this.onGameStart), this.subscribe(SubjectTypes.GET_NUMBER, this.onGetNumber), this.subscribe(SubjectTypes.GAME_END, this.onGameEnd), this.subscribe(SubjectTypes.GAME_INIT, this.init), this.laba_close.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.allSoundinit, this), this.laba_open.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeSoundHandler, this), this.laba_close.addEventListener(egret.TouchEvent.TOUCH_TAP, this.openSoundHandler, this)
        }, e.prototype.allSoundinit = function () {
            SoundMusicManager.initAllSoundWithExtreme(), SoundEffectManager.initAllSoundWithExtreme()
        }, e.prototype.closeSoundHandler = function (t) {
            this.removeChild(this.laba_open), this.addChild(this.laba_close), SoundEffectManager.isOpen = !1, SoundMusicManager.isOpen = !1, SoundEffectManager.stopAllSound(), SoundMusicManager.stopAllSound()
        }, e.prototype.openSoundHandler = function (t) {
            this.addChild(this.laba_open), this.removeChild(this.laba_close), SoundEffectManager.isOpen = !0, SoundMusicManager.isOpen = !0, SoundMusicManager.playSoundSingle(SoundNames.BG_GAME, 0, 0), 2 == CommonVariable.awardStatus && SoundEffectManager.playSound(SoundNames.PLAYING, 0, 0, .5)
        }, e.prototype.init = function () {
            this.getData(), this.getRecord()
        }, e.prototype.onGameStart = function () {
            this.jinqi_txt.visible = !1, CommonVariable.isSimulating ? (this.qishu_txt.visible = !1, this.moni_txt.visible = !0) : (this.xiaqi_txt.text = "开奖中", this.shijian_txt.text = "开奖中", this.qishu_txt.text = "开奖中", this.he_txt.text = "", this.danshuang_txt.text = "", this.daxiao_txt.text = "", this.longhu_txt.text = "", this.qiansan_txt.text = "", this.zhongsan_txt.text = "", this.housan_txt.text = "");

            for (var t = 0; 5 > t; t++) this["bit" + t].texture = RES.getRes("LotteryNum0011")
        }, e.prototype.onGetNumber = function (t) {
            var e = CommonVariable.resultArray, r = e[t];
            "0" == r && (r = "10");
            var i = r.length > 1 ? r : 0 + r;
            this["bit" + t].texture = RES.getRes("LotteryNum00" + i), 4 == t && TimerDelayCaller.addCallerOnce(null, ConcreteSubject.notify, ConcreteSubject, 500, SubjectTypes.SHOW_VICTORY)
        }, e.prototype.onGameEnd = function () {
            this.getRecord()
        }, e.prototype.getResult = function () {
            for (var t = CommonVariable.resultArray, e = 0; 5 > e; e++) {
                var r = t[e];
                "0" == r && (r = "10");
                var i = r.length > 1 ? r : 0 + r;
                this["bit" + e].texture = RES.getRes("LotteryNum00" + i)
            }
        }, e.prototype.getData = function () {
            var t = localData.Cache.data;
            this.xiaqi_txt.text = t.next.periodNumber, this.qishu_txt.text = "第  " + t.current.periodNumber + "  期", this.shijian_txt.text = t.next.awardTime.split(" ")[1];
            for (var e = localData.Cache.data.current.awardNumbers.split(","), r = 0; 5 > r; r++) {
                var i = e[r];
                "0" == i && (i = "10");
                var n = i.length > 1 ? i : 0 + i;
                
                this["bit" + r].texture = RES.getRes("LotteryNum00" + n);
                //console.log("LotteryNum00" + n)
            }
            this.jinqi_txt.visible = !0, this.qishu_txt.visible = !0, this.moni_txt.visible = !1
        }, e.prototype.getRecord = function () {
            var t = Cache.record;
            this.he_txt.text = t.total, this.danshuang_txt.text = t.totalOddorEven, this.daxiao_txt.text = t.totalBigOrSmall, this.longhu_txt.text = t.longhu, this.qiansan_txt.text = t.qianSan, this.zhongsan_txt.text = t.zhongSan, this.housan_txt.text = t.houSan
        }, e
    }(egret.Sprite);
    t.InfoView = e, __reflect(e.prototype, "game.InfoView", ["IObserver"])
}(game || (game = {}));
var mcProxy;
!function (t) {
    var e = function () {
        function t(t) {
            this.dragonBonesBird = new bones.DragonBonesBird, this.armature = this.dragonBonesBird.armature, t.addChild(this.armature.display), this.armature.display.x = 250, this.armature.display.y = -100, this.armature.display.anchorOffsetX = 44, this.armature.display.anchorOffsetY = 8, this.armature.animation.timeScale = 1, t.addChild(this.armature.display), this.hotArea = new egret.Sprite, this.hotArea.alpha = .3, this.hotArea.x = -10, this.hotArea.y = 5;
            var e = new egret.Point(localData.Cache.birdHotAreaPoints[0][0], localData.Cache.birdHotAreaPoints[0][1]);
            this.hotArea.graphics.moveTo(e.x, e.y), this.hotArea.graphics.beginFill(16711680);
            for (var r = 1; r < localData.Cache.birdHotAreaPoints.length; r++) {
                var i = new egret.Point(localData.Cache.birdHotAreaPoints[r][0], localData.Cache.birdHotAreaPoints[r][1]);
                this.hotArea.graphics.lineTo(i.x, i.y)
            }
            this.hotArea.graphics.lineTo(e.x, e.y), this.hotArea.graphics.endFill(), t.stage.addChildAt(this.hotArea, 0), this.hotArea.touchEnabled = !1, this.hotArea.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.anxiaHandler, this), this.subscribe(SubjectTypes.GAME_INIT, this.feiruHandler), this.subscribe(SubjectTypes.BIRD_OUT, this.diaipaiFeichuHandler), this.armature.addEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, this.customEvent, this)
        }

        return t.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, t.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, t.prototype.gotoAndPlay = function (t, e, r, i) {
            void 0 === e && (e = 0), void 0 === r && (r = 0), void 0 === i && (i = 1);
            var n = this.armature.animation.gotoAndPlay(t, 0);
            n.playTimes = e, n.currentTime = r, n.timeScale = i, this.currentAction = t
        }, t.prototype.feiruHandler = function () {
            if (!(CommonVariable.timeInterval < 55)) {
                TimerDelayCaller.clearCallerAt("sssq");
                var t = this.armature.getSlot("pai1"), e = t.getDisplay();
                e && (e.visible = !0), this.armature.display.x = 250, this.armature.display.y = -100, this.gotoAndPlay("in", 0), egret.Tween.get(this.armature.display).to({
                    x: 811,
                    y: 86
                }, 1700).call(this.jianglouHandler, this)
            }
        }, t.prototype.jianglouHandler = function () {
            this.gotoAndPlay("land", 1)
        }, t.prototype.customEvent = function (t) {
            "land_end" == t.frameLabel && (this.gotoAndPlay("normal1", 0), this.hotArea.touchEnabled = !0)
        }, t.prototype.anxiaHandler = function (t) {
            this.gotoAndPlay("normal2", 0, 1), this.hotArea.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.moveHandler, this), this.hotArea.addEventListener(egret.TouchEvent.TOUCH_END, this.moniHandler, this)
        }, t.prototype.moveHandler = function (t) {
            this.hotArea.hitTestPoint(t.localX, t.localY, !0) || (this.gotoAndPlay("normal1", 0), this.hotArea.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.moveHandler, this), this.hotArea.removeEventListener(egret.TouchEvent.TOUCH_END, this.moniHandler, this))
        }, t.prototype.moniHandler = function (t) {
            this.gotoAndPlay("normal3", 1), this.keepOn(), this.hotArea.touchEnabled = !1, this.hotArea.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.moveHandler, this), this.hotArea.removeEventListener(egret.TouchEvent.TOUCH_END, this.moniHandler, this), this.feichuHandler()
        }, t.prototype.keepOn = function () {
            ConcreteSubject.notify(SubjectTypes.DROP_DOWN), this.hideSSSQ(), TimerDelayCaller.addCallerRepeat("sssq", this.hideSSSQ, this, 1e3 / 60);
        }, t.prototype.hideSSSQ = function () {
            var t = this.armature.getSlot("pai1"), e = t.getDisplay();
            e && (e.visible = !1)
        }, t.prototype.feichuHandler = function () {
            TimerDelayCaller.addCallerOnce(null, this.gotoAndPlay, this, 500, "out", 0, .5, 1), egret.Tween.get(this.armature.display).wait(1200).to({
                x: 1200,
                y: -100
            }, 1200).call(this.birdStop, this), localData.CommonVariable.isSimulating = !0, ConcreteSubject.notify(SubjectTypes.GAME_START)
            console.log(CommonVariable.isSimulating);
        }, t.prototype.diaipaiFeichuHandler = function () {
            null != this.hotArea && this.hotArea.stage && (this.hotArea.touchEnabled = !1, this.hotArea.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.moveHandler, this), this.hotArea.removeEventListener(egret.TouchEvent.TOUCH_END, this.moniHandler, this)), this.gotoAndPlay("in", 0, 1), egret.Tween.get(this.armature.display).wait(500).to({
                x: 1200,
                y: -100
            }, 1200).call(this.birdStop, this)
        }, t.prototype.birdStop = function () {
            TimerDelayCaller.clearCallerAt("sssq"), this.armature.animation.stop()
        }, t
    }();
    t.BirdProxy = e, __reflect(e.prototype, "mcProxy.BirdProxy", ["IObserver"])
}(mcProxy || (mcProxy = {}));
var mcProxy;
!function (t) {
    var e = function () {
        function t(t) {
            this.board_mc = t[0], this.numContainer = t[1], this.numBGContainer = t[2], this.recordContainer = t[3], this.rollContainer = t[4], this.subscribe(SubjectTypes.GAME_START, this.onGameStart), this.subscribe(SubjectTypes.GET_NEWDATA, this.awardOver), this.subscribe(SubjectTypes.OVER_TIME, this.unInit)
        }

        return t.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, t.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, t.prototype.unInit = function () {
            for (var t = 0; 5 > t; t++) for (var e = 0; 3 > e; e++) {
                var r = getHashObject("num_h" + t + "s" + e);
                r.y = 166 + 100 * e
            }
        }, t.prototype.init = function () {
            for (var t = 0; 5 > t; t++) {
                var e = Number(localData.CommonVariable.resultArray[t]),
                    r = this.numContainer.getChildByName("num_h" + t + "s1");
                r.visible = !0, r.userData.visible = !1, this.mcGoto(r, e), r = this.numContainer.getChildByName("num_h" + t + "s0"), this.mcGoto(r, e - 1), r = this.numContainer.getChildByName("num_h" + t + "s2"), this.mcGoto(r, e + 1);
                var i = this.recordContainer.getChildByName("dx" + t);
                e > 4 ? i.gotoAndStop(1) : i.gotoAndStop(2);
                var n = this.recordContainer.getChildByName("ds" + t);
                e % 2 == 0 ? n.gotoAndStop(1) : n.gotoAndStop(2), r = getHashObject("num_h" + t + "s0"), r.visible = !1, r = getHashObject("num_h" + t + "s2"), r.visible = !1, r = getHashObject("dx" + t), r.visible = !0, r = getHashObject("ds" + t), r.visible = !0;
                var a = this.rollContainer.getChildByName("roll1_" + t);
                a.visible = !0, a.stop();
                var o = this.rollContainer.getChildByName("roll2_" + t);
                o.visible = !0, o.stop();
                var s = this.rollContainer.getChildByName("roll3_" + t);
                s.visible = !0, s.stop()
            }
            this.rollContainer.visible = !1
        }, t.prototype.mcGoto = function (t, e) {
            1 > e && (e += 10), t.gotoAndStop(e)
        }, t.prototype.onGameStart = function () {
            this.rollContainer.visible = !0;
            for (var t = 0; t < this.numContainer.numChildren; t++) this.numContainer.getChildAt(t).visible = !1;
            for (t = 0; t < this.recordContainer.numChildren; t++) this.recordContainer.getChildAt(t).visible = !1;
            for (t = 0; 5 > t; t++) {
                var e = this.rollContainer.getChildByName("roll1_" + t);
                e.visible = !0, e.play(), e = this.rollContainer.getChildByName("roll2_" + t), e.visible = !0, e.play(), e = this.rollContainer.getChildByName("roll3_" + t), e.visible = !0, e.play()
            }
            SoundEffectManager.playSound(SoundNames.PLAYING, 0, 0, .5)
        }, t.prototype.awardOver = function () {
            for (var t = 0; 5 > t; t++) TimerDelayCaller.addCallerOnce(null, function (t) {
                var e = getHashObject("roll1_" + t);
                e.stop(), e.visible = !1, e = getHashObject("roll2_" + t), e.stop(), e.visible = !1, e = getHashObject("roll3_" + t), e.stop(), e.visible = !1;
                for (var r = 0; 3 > r; r++) {
                    var i = getHashObject("num_h" + t + "s" + r);
                    i.visible = !1, i.gotoAndStop(11), i.userData.visible = !0, i.userData.gotoAndPlay(1)
                }
                4 == t && SoundEffectManager.stopSound(SoundNames.PLAYING)
            }, this, 1e3 + 150 * t, t), TimerDelayCaller.addCallerOnce(null, function (t) {
                0 == t && SoundMusicManager.playSoundSingle(SoundNames.WIN);
                var e = Number(localData.CommonVariable.resultArray[t]), r = getHashObject("num_h" + t + "s1");
                r.gotoAndStop(e > 0 ? e : 10), r = getHashObject("num_h" + t + "s0"), r.visible = !1, r = getHashObject("num_h" + t + "s2"), r.visible = !1, r = getHashObject("dx" + t), r.gotoAndStop(e > 4 ? 1 : 2), r.visible = !0, r = getHashObject("ds" + t), r.gotoAndStop(e % 2 == 0 ? 1 : 2), r.visible = !0, ConcreteSubject.notify(SubjectTypes.GET_NUMBER, t)
            }, this, 2e3 + 100 * t, t)
        }, t
    }();
    t.BoardProxy = e, __reflect(e.prototype, "mcProxy.BoardProxy", ["IObserver"])
}(mcProxy || (mcProxy = {}));
var mcProxy;
!function (t) {
    var e = function () {
        function t(t) {
            this.sws_b = new disDev.AnimationLite(10, "YellowNum_", 1, 2, 1, (!1)), this.sws_s = new disDev.AnimationLite(10, "YellowNum_", 1, 2, 1, (!1)), this.sws_g = new disDev.AnimationLite(10, "YellowNum_", 1, 2, 1, (!1)), this.lws_s = new disDev.AnimationLite(10, "RedNum_", 1, 2, 8, (!1)), this.lws_g = new disDev.AnimationLite(10, "RedNum_", 1, 2, 8, (!1)), this.clock_mc = t, this.clock_mc.x = 0, this.clock_mc.y = 0, this.clock_mc.scaleX = this.clock_mc.scaleY = 1 / .7, this.sws_mc = new egret.Sprite, this.lws_mc = new egret.Sprite;
            var e = disDev.TextureInfoMaker.createStaticInfo(1, "ZhongZC_000"),
                r = disDev.TextureInfoMaker.createInfo(12, "ZhongKS_", 0, 3),
                i = disDev.TextureInfoMaker.createInfo(37, "ZhongZD_", 0, 3),
                n = disDev.TextureInfoMaker.createInfo(2, "ZhongFC_", 0, 3),
                a = disDev.TextureInfoMaker.createInfo(56, "ZhongXZ_", 0, 3);
            this.clock_mc.reconstruct([e, r, i, n, a], 1, !1), this.ht0 = this.clock_mc.getPartHeadAndTailAt(0), this.ht1 = this.clock_mc.getPartHeadAndTailAt(1), this.ht2 = this.clock_mc.getPartHeadAndTailAt(2), this.ht3 = this.clock_mc.getPartHeadAndTailAt(3), this.ht4 = this.clock_mc.getPartHeadAndTailAt(4), this.clock_mc.setLoopPoint(this.ht2.head + 1, this.ht2.tail + 1), this.clock_mc.addFrameScript(this.ht3.tail, this.stopHandler, this), this.clock_mc.addChild(this.sws_mc), this.clock_mc.addChild(this.lws_mc), this.sws_b.x = 242, this.sws_s.x = 266, this.sws_g.x = 290, this.sws_b.y = this.sws_s.y = this.sws_g.y = 565, this.sws_mc.addChild(this.sws_b), this.sws_mc.addChild(this.sws_s), this.sws_mc.addChild(this.sws_g), this.sws_mc.scaleX = this.sws_mc.scaleY = .7, this.lws_s.x = 242, this.lws_g.x = 278, this.lws_s.y = this.lws_g.y = 560, this.lws_mc.addChild(this.lws_s), this.lws_mc.addChild(this.lws_g), this.lws_mc.scaleX = this.lws_mc.scaleY = .7, this.subscribe(SubjectTypes.GAME_START, this.onGameStart), this.subscribe(SubjectTypes.GAME_INIT, this.init), this.subscribe(SubjectTypes.OVER_TIME, this.unInit)
        }

        return t.prototype.stopHandler = function () {
            this.clock_mc.gotoAndStop(this.ht3.tail + 1), ConcreteSubject.notify(SubjectTypes.SWORD_OUT), SoundEffectManager.playSound(SoundNames.DAGGER)
        }, t.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, t.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, t.prototype.unInit = function () {
            this.isInit = !1, clearInterval(this.intervalID)
        }, t.prototype.init = function () {
            CommonVariable.awardStatus = 0, this.clock_mc.gotoAndStop(1), CommonVariable.timeInterval < 10 ? CommonVariable.timeInterval = 10 : CommonVariable.timeInterval > 15 && SoundMusicManager.isOpen && !SoundMusicManager.getSoundChannel(SoundNames.BG_GAME) && SoundMusicManager.playSoundSingle(SoundNames.BG_GAME, 0, 0), CommonVariable.timeInterval <= 0 && (clearInterval(this.intervalID), this.intervalID = setInterval(this.timeRun.bind(this), 1e3)), this.isInit || (clearInterval(this.intervalID), this.intervalID = setInterval(this.timeRun.bind(this), 1e3), this.isInit = !0), CommonVariable.timeInterval += 1, this.timeRun()
        }, t.prototype.timeRun = function () {
            0 == CommonVariable.awardStatus && this.clock_mc.gotoAndStop(1), CommonVariable.timeInterval -= 1;
            var t = CommonVariable.timeInterval;
            t > 999 ? t = 999 : 0 > t && (t = 0);
            var e, r, i;
            if (t > 99) CommonVariable.awardStatus < 2 && (this.sws_mc.visible = !0), this.lws_mc.visible = !1, e = Number(t.toString().substr(0, 1)), r = Number(t.toString().substr(1, 1)), i = Number(t.toString().substr(2, 1)), 0 == e && (e = 10), 0 == r && (r = 10), 0 == i && (i = 10), this.sws_b.gotoAndStop(e), this.sws_s.gotoAndStop(r), this.sws_g.gotoAndStop(i); else {
                this.sws_mc.visible = !1, CommonVariable.awardStatus < 2 && (this.lws_mc.visible = !0);
                var n = t.toString();
                n.length < 2 && (n = 0 + n), r = Number(n.substr(0, 1)), i = Number(n.substr(1, 1)), 0 == r && (r = 10), 0 == i && (i = 10), this.lws_s.gotoAndStop(r), this.lws_g.gotoAndStop(i)
            }
            50 == t && CommonVariable.awardStatus < 2 && ConcreteSubject.notify(SubjectTypes.BIRD_OUT), 10 == t && 0 == CommonVariable.awardStatus && (this.clock_mc.gotoAndPlay(this.ht1.head + 1), this.clock_mc.setLoopPoint(this.ht2.head + 22, this.ht2.tail + 1), ConcreteSubject.notify(SubjectTypes.SWORD_SHAKE)), 10 >= t && 0 == CommonVariable.awardStatus && (CommonVariable.awardStatus = 1), 0 >= t && 1 == CommonVariable.awardStatus && (CommonVariable.awardStatus = 2, this.clock_mc.gotoAndPlay(this.ht3.head + 1), TimerDelayCaller.addCallerOnce(null, function () {
                CommonVariable.isSimulating = !1, ConcreteSubject.notify(SubjectTypes.GAME_START)

            }, this, 1e3)), 10 >= t && t > 0 && CommonVariable.awardStatus < 2 && SoundEffectManager.playSound(SoundNames.SECONDS)
        }, t.prototype.onGameStart = function () {
            CommonVariable.isSimulating ? (this.sws_mc.visible = !1, this.lws_mc.visible = !1, this.clock_mc.setLoopPoint(this.ht4.head + 1, this.ht4.tail + 1, !0)) : TimerDelayCaller.addCallerOnce(null, function () {
                
                this.sws_mc.visible = !1, this.lws_mc.visible = !1, this.clock_mc.setLoopPoint(this.ht4.head + 1, this.ht4.tail + 1, !0)
            }, this, 1e3)
        }, t
    }();
    t.ClockProxy = e, __reflect(e.prototype, "mcProxy.ClockProxy", ["IObserver"])
}(mcProxy || (mcProxy = {}));
var mcProxy;
!function (t) {
    var e = function () {
        function t(t) {
            this.dragonBonesFatGuy = new bones.DragonBonesFatGuy, this.armature = this.dragonBonesFatGuy.armature, t.addChild(this.armature.display), this.armature.display.x = 895, this.armature.display.y = 412, this.armature.display.anchorOffsetX = 0, this.armature.display.anchorOffsetY = 0, this.armature.animation.timeScale = 1, t.addChild(this.armature.display), this.gotoAndPlay("normal"), this.subscribe(SubjectTypes.GAME_INIT, this.init), this.subscribe(SubjectTypes.DROP_DOWN, this.beiza, this), this.subscribe(SubjectTypes.SHOW_VICTORY, this.victory, this), this.armature.addEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, this.customEvent, this)
        }

        return t.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, t.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, t.prototype.init = function () {
            "normal" != this.currentAction && this.gotoAndPlay("normal"), this.isFirng = !1
        }, t.prototype.gotoAndPlay = function (t, e, r, i) {
            void 0 === e && (e = 0), void 0 === r && (r = 0), void 0 === i && (i = 1), this.stop(), this.anms = this.armature.animation.gotoAndPlay(t, 0, -1, e), this.anms.currentTime = r, this.armature.animation.timeScale = i, this.currentAction = t
        }, t.prototype.stop = function () {
            this.anms && this.anms.isPlaying && this.anms.stop()
        }, t.prototype.beiza = function () {
            this.isFirng = !0, this.gotoAndPlay("dizzy1", 1)
        }, t.prototype.customEvent = function (t) {
            "dizzy1_end" == t.frameLabel ? this.gotoAndPlay("dizzy2", 1) : "dizzy2_end" == t.frameLabel ? this.gotoAndPlay("dizzy3", 1) : "dizzy3_end" == t.frameLabel ? this.gotoAndPlay("fire1", 1) : "fire1_end" == t.frameLabel ? this.gotoAndPlay("fire2") : "fire3_end" == t.frameLabel ? this.gotoAndPlay("win", 1) : "win_end" == t.frameLabel && this.gotoAndPlay("normal")
        }, t.prototype.victory = function () {
            this.isFirng ? this.gotoAndPlay("fire3", 1) : TimerDelayCaller.addCallerOnce(null, this.gotoAndPlay, this, 200, "win", 1), this.isFirng = !1
        }, t
    }();
    t.FatguyProxy = e, __reflect(e.prototype, "mcProxy.FatguyProxy", ["IObserver"])
}(mcProxy || (mcProxy = {}));
var mcProxy;
!function (t) {
    var e = function () {
        function t(t) {
            this.dragonBonesKing = new bones.DragonBonesKing, this.armature = this.dragonBonesKing.armature, t.addChild(this.armature.display), this.armature.display.x = 85, this.armature.display.y = 409, this.armature.display.anchorOffsetX = 0, this.armature.display.anchorOffsetY = 0, this.armature.animation.timeScale = 1, t.addChild(this.armature.display), this.gotoAndPlay("normal"), this.subscribe(SubjectTypes.GAME_INIT, this.init), this.subscribe(SubjectTypes.SWORD_SHAKE, this.beAfraid, this), this.subscribe(SubjectTypes.SWORD_OUT, this.beAfraid2, this), this.subscribe(SubjectTypes.SHOW_VICTORY, this.victory, this), this.armature.addEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, this.customEvent, this)
        }

        return t.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, t.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, t.prototype.init = function () {
            CommonVariable.timeInterval > 10 ? "normal" != this.currentAction && this.gotoAndPlay("normal") : this.gotoAndPlay("afraid", 1)
        }, t.prototype.gotoAndPlay = function (t, e, r, i) {
            void 0 === e && (e = 0), void 0 === r && (r = 0), void 0 === i && (i = 1), this.stop(), this.anms = this.armature.animation.gotoAndPlay(t, 0, -1, e), this.anms.currentTime = r, this.armature.animation.timeScale = i, this.currentAction = t
        }, t.prototype.stop = function () {
            this.anms && this.anms.isPlaying && this.anms.stop()
        }, t.prototype.beAfraid = function () {
            this.gotoAndPlay("afraid", 1)
        }, t.prototype.beAfraid2 = function () {
            this.gotoAndPlay("afraid2", 1, .17)
        }, t.prototype.customEvent = function (t) {
            "afraid_end" == t.frameLabel ? this.gotoAndPlay("afraid1") : "afraid2_end" == t.frameLabel ? this.gotoAndPlay("pant_1", 1) : "pant_1_end" == t.frameLabel ? (this.pant = 0, this.gotoAndPlay("pant_2", 1)) : "pant_2_end" == t.frameLabel ? (this.pant++, this.pant >= 3 ? this.gotoAndPlay("pant_3", 1) : this.gotoAndPlay("pant_2", 1)) : "pant_3_end" == t.frameLabel ? this.gotoAndPlay("normal") : "smile_1_end" == t.frameLabel ? this.gotoAndPlay("smile_2", 1) : "smile_2_end" == t.frameLabel ? (this.smileTimes++, this.smileTimes >= 3 ? this.gotoAndPlay("smile_3", 1) : this.gotoAndPlay("smile_2", 1)) : "smile_3_end" == t.frameLabel && this.gotoAndPlay("normal", 0)
        }, t.prototype.victory = function () {
            this.smileTimes = 0, TimerDelayCaller.addCallerOnce(null, this.gotoAndPlay, this, 200, "smile_1", 1)
        }, t
    }();
    t.KingProxy = e, __reflect(e.prototype, "mcProxy.KingProxy", ["IObserver"])
}(mcProxy || (mcProxy = {}));
var game;
!function (t) {
    var e = function () {
        function e(e, r) {
            this.subscribe(SubjectTypes.GET_DATA, this.initGetData, this), this.subscribe(SubjectTypes.GET_RECORD, this.initGetRecord, this), this.subscribe(SubjectTypes.LINK_FAULT, this.onFault, this), this.gameView = new t.GameView, this.infoView = new t.InfoView, r.addChild(this.gameView), e.addChild(this.infoView), this.gameView.visible = !1, this.infoView.visible = !1, t.DataRequester.getData()
        }

        return e.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, e.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, e.prototype.reStart = function () {
            this.$initRecord = this.$initData = !1, clearTimeout(this.requestID), clearInterval(this.requestID), this.unsubscribe(), this.subscribe(SubjectTypes.GET_DATA, this.initGetData), this.gameView.visible = !1, this.infoView.visible = !1, t.DataRequester.getData()
        }, e.prototype.initGetData = function () {
            this.infoView.getData(), this.gameView.init(), this.$initData || (this.unsubscribe(), this.gameView.visible = !0, this.infoView.visible = !0, this.gameView.dispatchEvent(new egret.Event("enterGame", (!0))), this.subscribe(SubjectTypes.GET_DATA, this.getData, this), this.subscribe(SubjectTypes.GAME_START, this.onGameStart), ConcreteSubject.notify(SubjectTypes.GAME_INIT)), this.$initData = !0
        }, e.prototype.initGetRecord = function () {
            this.$initData && !this.$initRecord && (this.unsubscribe(), this.gameView.visible = !0, this.infoView.visible = !0, this.gameView.dispatchEvent(new egret.Event("enterGame", (!0))), this.subscribe(SubjectTypes.GET_DATA, this.getData, this), this.subscribe(SubjectTypes.GAME_START, this.onGameStart), ConcreteSubject.notify(SubjectTypes.GAME_INIT)), this.$initRecord = !0
        }, e.prototype.getData = function () {
            2 == CommonVariable.awardStatus && Number(Cache.data.next.awardTimeInterval) > 0 && (clearInterval(this.requestID),
                clearInterval(this.requestID),
                localData.CommonVariable.awardStatus = 3,
                ConcreteSubject.notify(SubjectTypes.GET_NEWDATA),
                TimerDelayCaller.addCallerOnce(null, ConcreteSubject.notify, ConcreteSubject, 5e3, SubjectTypes.GAME_END),
                TimerDelayCaller.addCallerOnce(null, this.init, this, 6e3))
        }, e.prototype.getRecord = function () {
            var t = Cache.record.period.split("-")[1];
            Number(Cache.data.current.periodNumber) == Number(t) && (clearInterval(this.requestID), localData.CommonVariable.awardStatus = 3, ConcreteSubject.notify(SubjectTypes.GET_NEWDATA), TimerDelayCaller.addCallerOnce(null, ConcreteSubject.notify, ConcreteSubject, 5e3, SubjectTypes.GAME_END), TimerDelayCaller.addCallerOnce(null, this.init, this, 6e3))
        }, e.prototype.onFault = function () {
            clearTimeout(this.requestID), clearInterval(this.requestID)
        }, e.prototype.init = function () {
            TimerDelayCaller.clearAllCallers(), clearTimeout(this.requestID), clearInterval(this.requestID), ConcreteSubject.notify(SubjectTypes.GAME_INIT)
        }, e.prototype.onGameStart = function () {
            localData.CommonVariable.awardStatus = 2, this.requestID = setTimeout(this.tryToGetResult.bind(this), 3e3)
        }, e.prototype.tryToGetResult = function () {
            if (clearTimeout(this.requestID), localData.CommonVariable.isSimulating) {
                console.log(CommonVariable.isSimulating);
                for (var e = 0; 5 > e; e++) localData.CommonVariable.resultArray[e] = Math.floor(10 * Math.random()).toString();
                trace(localData.CommonVariable.resultArray), localData.CommonVariable.awardStatus = 3, ConcreteSubject.notify(SubjectTypes.GET_NEWDATA), TimerDelayCaller.addCallerOnce(null, ConcreteSubject.notify, ConcreteSubject, 5e3, SubjectTypes.GAME_END), TimerDelayCaller.addCallerOnce(null, this.init, this, 6e3)
            } else this.requestID = setInterval(t.DataRequester.getData.bind(this), 3e3)
        }, e
    }();
    t.ViewMediator = e, __reflect(e.prototype, "game.ViewMediator", ["IObserver"])
}(game || (game = {}));
var Tween = egret.Tween, CommonVariable = localData.CommonVariable, Cache = localData.Cache,
    SoundEffectManager = esm.SoundEffectManager, SoundMusicManager = esm.SoundMusicManager,
    GameApplication = function (t) {
        function e() {
            var e = t.call(this) || this;
            if (e.versionDate = 201706021550, e.initParams(), ActivateRunTimes.start(), e.addEventListener(egret.Event.ADDED_TO_STAGE, e.onAddToStage, e), egret.Capabilities.isMobile) {
                var r = document.createElement("img");
                document.body.appendChild(r), e.setWindowTop(), e.setTopID = egret.setInterval(e.setWindowTop, e, 500)
            }
            return e.subscribe(SubjectTypes.LINK_FAULT, e.onFault), e
        }

        return __extends(e, t), e.prototype.initParams = function () {
            var t = document.getElementById("paramters").dataset;
            InitConfig.res_path = t.respath, InitConfig.req_host = t.reqhost, InitConfig.isRelease = "true" == t.isrelease, InitConfig.isShowVersion = t.isshowversion
        }, e.prototype.subscribe = function (t, e, r) {
            void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
        }, e.prototype.unsubscribe = function (t) {
            void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
        }, e.prototype.onFault = function () {
            this.debugInfoLayer.graphics.beginFill(16777215), this.debugInfoLayer.graphics.drawRect(-10, -10, this.stage.stageWidth + 20, this.stage.stageHeight + 20), this.debugInfoLayer.graphics.endFill();
            var t = new egret.Bitmap;
            t.texture = RES.getRes("linkFault"), t.x = (this.stage.stageWidth - t.width) / 2, t.y = 70, this.debugInfoLayer.addChild(t), this.gameLayer.visible = !1, SoundEffectManager.stopAllSound(), SoundEffectManager.isOpen = !1, TimerDelayCaller.clearAllCallers(), FrameDelayCaller.clearAllCallers(), ActivateRunTimes.stop()
        }, e.prototype.setWindowTop = function () {
            window.scrollTo(0, 0)
        }, e.prototype.traceTime = function () {
            trace(ActivateRunTimes.activateTimes, egret.getTimer())
        }, e.prototype.onAddToStage = function (t) {
            egret.Capabilities.isMobile ? this.stage.frameRate = 30 : this.stage.frameRate = 30, egret.startTick(function (t) {
                return dragonBones.WorldClock.clock.advanceTime(1 / 60), !1
            }, this), this.debugInfoLayer = new egret.Sprite, this.versionLayer = new egret.Sprite, this.loadingLayer = new egret.Sprite, this.infoLayer = new egret.Sprite, this.gameLayer = new egret.Sprite, this.addChild(this.gameLayer), this.addChild(this.infoLayer), this.addChild(this.loadingLayer), this.addChild(this.versionLayer), this.addChild(this.debugInfoLayer), this.onOrientationChange(), this.stage.addEventListener(egret.StageOrientationEvent.ORIENTATION_CHANGE, this.onOrientationChange, this), setTimeout(this.onOrientationChange.bind(this), 2e3), RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), InitConfig.isShowVersion && (this.version_txt = new egret.TextField, this.version_txt.bold = !0, this.version_txt.text = "ver." + this.versionDate, this.version_txt.size = 1, this.version_txt.y = this.stage.stageHeight - 20, this.versionLayer.addChild(this.version_txt)), this.subscribe(SubjectTypes.DYNAMIC_COMPLETE, this.onDymamicAssect), connect.NetworkConnector.connectToURL(InitConfig.res_path + "dynamic/dynamic.json", this.getDynamicJson, this)
        }, e.prototype.getDynamicJson = function (t) {
            if (t == connect.NetworkConnector.CONNECT_FAULT) this.onDymamicAssect(); else {
                var e = JSON.parse(t);
                connect.DynamicLoader.load(e)
            }
        }, e.prototype.onDymamicAssect = function () {
            this.unsubscribe(SubjectTypes.DYNAMIC_COMPLETE), RES.loadConfig(InitConfig.res_path + "resource/defaultRes.json", InitConfig.res_path + "resource/")
        }, e.prototype.onOrientationChange = function () {
            if (!egret.Capabilities.isMobile) return void(this.stage.scaleMode = egret.StageScaleMode.SHOW_ALL);
            if (window.hasOwnProperty("orientation")) {
                var t = Number(window.orientation);
                0 == t || 180 == t ? this.stage.scaleMode = egret.StageScaleMode.SHOW_ALL : this.stage.scaleMode = egret.StageScaleMode.EXACT_FIT
            }
        }, e.prototype.onConfigComplete = function (t) {
            RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.loadGroup("loadingFace")
        }, e.prototype.onResourceLoadComplete = function (t) {
            "loadingFace" == t.groupName ? (this.loadingView = new LoadingUI, this.loadingLayer.addChild(this.loadingView), document.getElementById("preloading").style.display = "none", RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), this.preLoadList = ["gameUI"], RES.loadGroup(this.preLoadList.shift())) : this.preLoadList.length > 0 ? RES.loadGroup(this.preLoadList.shift()) : 0 == this.preLoadList.length && (RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), TimerDelayCaller.addCallerOnce(null, this.createGameScene, this, 200))
        }, e.prototype.onResourceLoadError = function (t) {
            console.warn("Group:" + t.groupName + " has failed to load"), this.onResourceLoadComplete(t)
        }, e.prototype.onResourceProgress = function (t) {
            "loadingFace" != t.groupName && this.loadingView.setProgress(t.itemsLoaded, t.itemsTotal)
        }, e.prototype.createGameScene = function () {
            SoundEffectManager.isOpen = !1, SoundMusicManager.isOpen = !1, SoundEffectManager.stopAllSound(), SoundMusicManager.stopAllSound(), SoundMusicManager.registerSound(SoundNames.BG_GAME, RES.getRes("backGroundMusic_mp3"), .7), SoundMusicManager.registerSound(SoundNames.WIN, RES.getRes("win_mp3"), .2), SoundEffectManager.registerSound(SoundNames.SECONDS, RES.getRes("second_mp3"), 1), SoundEffectManager.registerSound(SoundNames.PLAYING, RES.getRes("rolling_mp3"), 1), SoundEffectManager.registerSound(SoundNames.DAGGER, RES.getRes("dagger_mp3"), .5), this.stage.addEventListener("enterGame", this.enterGame, this), this.viewMediator = new game.ViewMediator(this.infoLayer, this.gameLayer), ActivateRunTimes.start(), ActivateRunTimes.addCallbackBeforeStep("timeoutCheaking", this.deviationHandler, this)
        }, e.prototype.deviationHandler = function () {
            ActivateRunTimes.deviationCurrentTimes > 3e3 && (trace("等待超时,自动重新登入"), this.loadingLayer.addChild(this.loadingView), this.loadingView.replay(), ConcreteSubject.notify(SubjectTypes.OVER_TIME), FrameDelayCaller.clearAllCallers(), TimerDelayCaller.clearAllCallers(), SoundEffectManager.stopAllSound(), SoundMusicManager.stopAllSound(), egret.Tween.removeAllTweens(), clearInterval(this.timeID), ActivateRunTimes.stop(), this.stage.removeEventListener("enterGame", this.enterGame, this), this.gameRestart())
        }, e.prototype.gameRestart = function () {
            ActivateRunTimes.start(), this.stage.addEventListener("enterGame", this.enterGame, this), FrameDelayCaller.addCallerOnce(null, this.viewMediator.reStart, this.viewMediator, 30)
        }, e.prototype.enterGame = function (t) {
            this.stage.removeEventListener("enterGame", this.enterGame, this), this.loadingLayer.removeChild(this.loadingView), this.loadingView.stop()
        }, e
    }(egret.DisplayObjectContainer);
__reflect(GameApplication.prototype, "GameApplication", ["IObserver"]);
var LoadingUI = function (t) {
    function e() {
        var e = t.call(this) || this;
        return e.createView(), e.addEventListener(egret.Event.ADDED_TO_STAGE, e.onAdded, e), e
    }

    return __extends(e, t), e.prototype.onAdded = function (t) {
    }, e.prototype.createView = function () {
        this.loadingBG1 = new egret.Bitmap, this.loadingBG2 = new egret.Bitmap, this.loadingBG3 = new egret.Bitmap, this.loadingBG4 = new egret.Bitmap, this.loadingBG4.texture = RES.getRes("loadingBG4"), this.addChild(this.loadingBG4), this.loadingBG4.x = 241, this.loadingBG4.y = 463, this.barBitmap = new egret.Bitmap, this.addChild(this.barBitmap), this.barBitmap.x = -254, this.barBitmap.y = 464, this.barBitmap.texture = RES.getRes("LoadingBar"), this.loadingBG1.texture = RES.getRes("loadingBG1"), this.addChild(this.loadingBG1), this.loadingBG2.texture = RES.getRes("loadingBG2"), this.addChild(this.loadingBG2), this.loadingBG3.texture = RES.getRes("loadingBG3"), this.addChild(this.loadingBG3), this.loadingBG1.scaleX = this.loadingBG1.scaleY = 1 / .7, this.loadingBG2.scaleX = this.loadingBG2.scaleY = 1 / .7, this.loadingBG3.scaleX = this.loadingBG3.scaleY = 1 / .7, this.loadingBG4.scaleX = this.loadingBG4.scaleY = 1 / .7, this.barBitmap.scaleX = this.barBitmap.scaleY = 1 / .7, this.loadingBG2.y = 453, this.loadingBG3.y = 523, this.numBitmap = new disDev.AnimationLite(101, "ProNum", 1, 3), this.addChild(this.numBitmap);
        for (var t in connect.DynamicLoader.loadingAssets) {
            var e = connect.DynamicLoader.object[connect.DynamicLoader.loadingAssets[t]];
            e && this.addChild(e)
        }
    }, e.prototype.setProgress = function (t, e) {
        var r = Math.floor(t / e * 100);
        this.numBitmap.gotoAndStop(r + 1), this.barBitmap.x = -254 + 496 * r / 100
    }, e.prototype.replay = function () {
    }, e.prototype.stop = function () {
    }, e.prototype.destroy = function () {
    }, e
}(egret.Sprite);
__reflect(LoadingUI.prototype, "LoadingUI");
var ConcreteSubject = function () {
    function t() {
        throw new Error(this.__class__ + " 是静态成员集成类，无需实例化")
    }

    return t.addObserver = function (t, e, r, i) {
        if (null == r) throw new Error("错误：提供给 ConcreteSubject 的回调函数不能为null");
        if (r.length > 1) throw new Error("错误：提供给 ConcreteSubject 的回调函数必须不带参数，或只带1个any类型参数，当前有" + r.length + "个参数");
        var n = this.getKeyByObserver(t);
        return "undefined" == n && (n = this.createKeyByObserver(t)), null != this.observerCollection[n] && null != this.observerCollection[n][e] ? void console.log("提示：观察者 " + (t.__class__ || t.__type__ || typeof t) + " 已经订阅过此主题类型:  " + e + "，此次重复订阅无效") : (null == this.observerCollection[n] && (this.observerCollection[n] = {}), this.observerCollection[n][e] = r, null == this.callBackFunctionsArrayCollection[e] && (this.callBackFunctionsArrayCollection[e] = new Array), this.callBackFunctionsArrayCollection[e].push(r.bind(i)), null == this.subjectTypeCollection[e] && (this.subjectTypeCollection[e] = new Array), void this.subjectTypeCollection[e].push(t))
    }, t.removeObserver = function (t, e) {
        void 0 === e && (e = null);
        var r = this.getKeyByObserver(t);
        if ("undefined" == r) return void console.log("提示：观察者 " + (t.__class__ || t.__type__ || typeof t) + " 目前并未订阅任何主题类型，此次取消订阅无效");
        var i;
        if (null == e || "" == e) {
            for (var n in this.observerCollection[r]) i = this.callBackFunctionsArrayCollection[n].indexOf(this.observerCollection[r][n]), this.callBackFunctionsArrayCollection[n].splice(i, 1), delete this.observerCollection[r][n], i = this.subjectTypeCollection[n].indexOf(t), this.subjectTypeCollection[n].splice(i, 1), 0 == this.subjectTypeCollection[n].length && delete this.subjectTypeCollection[n];
            delete this.observerCollection[r]
        } else {
            if (null == this.observerCollection[r][e]) return void console.log("提示：观察者 " + (t.__class__ || t.__type__ || typeof t) + " 目前并未订阅此主题类型 " + e + "，此次取消订阅无效");
            i = this.callBackFunctionsArrayCollection[e].indexOf(this.observerCollection[r][e]), this.callBackFunctionsArrayCollection[e].splice(i, 1), delete this.observerCollection[r][e], i = this.subjectTypeCollection[e].indexOf(t), this.subjectTypeCollection[e].splice(i, 1), 0 == this.subjectTypeCollection[e].length && delete this.subjectTypeCollection[e];
            for (n in this.observerCollection[r]) if (this.observerCollection[r][n]) return;
            this.clearKeyByObserver(t), delete this.observerCollection[r]
        }
    }, t.notify = function (t, e) {
        if (void 0 === e && (e = null), null == this.callBackFunctionsArrayCollection[t]) return void console.log("提示：目前没有任何观察者订阅此主题类型 " + t + "，此次消息发布无效");
        this.notifyingSubjectType = t;
        var r = this.callBackFunctionsArrayCollection[t].concat();
        for (var i in r) {
            var n = r[i];
            null != n && (1 == n.length ? n.call(null, e) : n.call(null))
        }
        this.notifyingSubjectType = null
    }, t.notifyWeakly = function (t, e) {
        if (void 0 === e && (e = null), null == this.callBackFunctionsArrayCollection[t]) return void console.log("提示：目前没有任何观察者订阅此主题类型 " + t + "，此次消息发布无效");
        if (null != this.notifyCollection[t]) return console.log("提示：此主题类型 " + t + " 已在迭代发布中，为避免引发死循环，拦截并终止此次 notifyWeakly() 函数的调用"), this.notifyCollection[t] = null, delete this.notifyCollection[t], void(this.notifyingSubjectType = null);
        this.notifyCollection[t] = !0, this.notifyingSubjectType = t;
        var r = this.callBackFunctionsArrayCollection[t].concat();
        for (var i in r) {
            var n = r[i];
            null != n && (1 == n.length ? n.call(null, e) : n.call(null))
        }
        this.notifyCollection[t] = null, delete this.notifyCollection[t], this.notifyingSubjectType = null
    }, t.getObserversFromSubjectType = function (t) {
        var e;
        return null != this.subjectTypeCollection[t] && (e = this.subjectTypeCollection[t].concat()), e
    }, t.hasObserverAndSubjectType = function (t, e) {
        var r = this.getKeyByObserver(t);
        return null != this.observerCollection[r] && null != this.observerCollection[r][e]
    }, t.getSubjectTypesFromObserver = function (t) {
        var e, r = this.getKeyByObserver(t);
        if ("undefined" != r) {
            e = new Array;
            for (var i in this.observerCollection[r]) e.push(i)
        }
        return e
    }, t.getCurrentSubject = function () {
        return this.notifyingSubjectType
    }, t.getKeyByObserver = function (t) {
        var e = this.obsArray.indexOf(t);
        return -1 == e ? "undefined" : this.keyArray[e]
    }, t.createKeyByObserver = function (t) {
        return this.obsArray.push(t), this.keyArray.push("key" + this.currentKey.toString()), ("key" + this.currentKey++).toString()
    }, t.clearKeyByObserver = function (t) {
        var e = this.obsArray.indexOf(t);
        this.obsArray.splice(e, 1), this.keyArray.splice(e, 1)
    }, t
}();
ConcreteSubject.observerCollection = {}, ConcreteSubject.subjectTypeCollection = {}, ConcreteSubject.callBackFunctionsArrayCollection = {}, ConcreteSubject.notifyCollection = {}, ConcreteSubject.obsArray = new Array, ConcreteSubject.keyArray = new Array, ConcreteSubject.currentKey = 0, __reflect(ConcreteSubject.prototype, "ConcreteSubject");
var ObserverBase = function () {
    function t() {
    }

    return t.prototype.subscribe = function (t, e, r) {
        void 0 === r && (r = this), ConcreteSubject.addObserver(this, t, e, r)
    }, t.prototype.unsubscribe = function (t) {
        void 0 === t && (t = null), ConcreteSubject.removeObserver(this, t)
    }, t
}();
__reflect(ObserverBase.prototype, "ObserverBase", ["IObserver"]);